
packages <- installed.packages()
lapply(packages, require, character.only = TRUE)

rm(list=ls())


################################################################################


setwd("D:/m6A_Code")




################################################################################

rm(list=ls())
# ls = list.files( paste0(getwd(), "/Data/SampleList"), pattern = ".txt")
# dir =  list.files( paste0(getwd(), "/Data/SampleList"), pattern = ".txt", full.names = T )
# SampleList = list()
# for(i in 1: length(ls)){
#   SampleList[[ls[i]]] = read.table(dir[i])
# }
# 
# saveRDS(SampleList, "SampleList.rds")
SampleList <- readRDS("D:/m6A_Code/SampleList.rds")
names(SampleList)

sel=9
type=c("peak", "motif", "deepm6A"); 
# peakdir=paste0("D:/m6A_Code/Data/MetDB_CellData/exomepeak/Homo_sapiens/human_hg19/"); k=1
# motifdir=paste0("D:/m6A_Code/Data/MetDB_CellData/MotifSites/[DRACH_motif]"); k=2
# deepm6Adir=FileID=paste0("D:/m6A_Code/Data/MetDB_CellData/Deep_m6A_Sites/"); k=3
peakdir=paste0("D:/m6A_Code/Data/HumanTissueSample/peak/"); k=1
# motifdir=paste0("D:/m6A_Code/Data/HumanTissueSample/MotifSites/[DRACH_motif]"); k=2
# motifdir=paste0("D:/m6A_Code/Data/MouseTissueSample/MotifSites/[DRACH_motif]"); k=2


sample_list = SampleList[[sel]]
for(i in 1:nrow(sample_list)){
  print(i)
  fid = paste0(peakdir,
               sample_list[i,], 
               "/exomePeak_output/exomePeak.Rdata"
               )
  load(fid)
  peak_file <- tmp_rs
  
  peak <- peak_file[["PEAK"]]
  READS_COUNT <- peak_file[["READS_COUNT"]]
  SAMPLE_ID <- peak_file[["SAMPLE_ID"]]
  
  #rename the columns
  colnames(READS_COUNT)[SAMPLE_ID$ip] <- paste0("IP", (1:length(SAMPLE_ID$ip)))
  colnames(READS_COUNT)[SAMPLE_ID$input] <- paste0("Input", (1:length(SAMPLE_ID$input)))
  
  peak_xls = paste0(peakdir,
               sample_list[i,], 
               "/exomePeak_output/con_peak.xls"
  ); con_peak=TRUE
  read_peak <- read.table(peak_xls, sep="\t", header=T, stringsAsFactors=F)
  select_peak <- cbind(read_peak$chr, read_peak$chromStart, read_peak$chromEnd, read_peak$name, as.character(read_peak$strand), read_peak$score, read_peak$lg.p, read_peak$lg.fdr, read_peak$fold_enrchment)
  colnames(select_peak) <- c("seqnames", "start", "end", "gene_id", "strand", "score", "lg.p", "lg.fdr", "fold_enrchment")
 

  ## get size factor
  reads_count <- READS_COUNT[,-((ncol(READS_COUNT)-1):ncol(READS_COUNT))]
  totalreads <- data.frame(counts=colSums(reads_count))
  
  ##judue the peak type: consistent peak or all peak
  if(con_peak==TRUE){
    peak_loci <- peak$loci2peak_consistent
  }else{
    peak_loci <- peak$loci2peak_merged
  }
  
  # peak_reads_count
  no_peak=length(peak_loci[,1])
  peak_reads_count = READS_COUNT[1:no_peak,]
  no_sample=length(peak_reads_count[1,])-2
  
  # cut the unnecessary information (just data.frame formation)
  peak_reads_count = READS_COUNT[1:no_peak,1:no_sample]
  
  # count
  for (ipeak in 1:no_peak) {
    temp=peak_loci[ipeak,]
    temp2=colSums(READS_COUNT[temp[1]:temp[2],1:no_sample])
    peak_reads_count[ipeak,1:no_sample]=temp2
  }
  
  # remove the overlapping window effects  ====> confirm with Cameron
  ReadLength = 150
  WindowSize = 30
  peak_reads_count = round (peak_reads_count * WindowSize / ReadLength);
  
  
  ## peak site read
  peak_site_reads <- cbind(select_peak, peak_reads_count)#, peak_report[,2:3])
  peak_site_reads <- peak_site_reads[which(!is.na(peak_site_reads$gene_id)), ]
  peak_site_infor <- list(peak_site_reads, totalreads)
  
  
  if(con_peak==TRUE){
    
    fid = paste0(peakdir,
                 sample_list[i,], 
                 "/exomePeak_output/con_peak_info.rds"
    )
    saveRDS(peak_site_infor, fid)
    fid = paste0(peakdir,
                 sample_list[i,], 
                 "/exomePeak_output/con_peak_info.xlsx"
    )    
    write_xlsx(peak_site_infor, fid)
    
  }else{
    
    fid = paste0(peakdir,
                 sample_list[i,], 
                 "/exomePeak_output/all_peak_info.rds"
    )
    saveRDS(peak_site_infor, fid)
    fid = paste0(peakdir,
                 sample_list[i,], 
                 "/exomePeak_output/all_peak_info.xlsx"
    )    
    write_xlsx(peak_site_infor, fid)
  }

}



################################################################################


rm(list=ls())
# ls = list.files( paste0(getwd(), "/Data/SampleList"), pattern = ".txt")
# dir =  list.files( paste0(getwd(), "/Data/SampleList"), pattern = ".txt", full.names = T )
# SampleList = list()
# for(i in 1: length(ls)){
#   SampleList[[ls[i]]] = read.table(dir[i])
# }
# 
# saveRDS(SampleList, "SampleList.rds")
SampleList <- readRDS("D:/m6A_Code/SampleList.rds")
names(SampleList)

sel=9


type=c("peak", "motif", "deepm6A"); 
# peakdir=paste0("D:/m6A_Code/Data/MetDB_CellData/exomepeak/Homo_sapiens/human_hg19/"); k=1
# motifdir=paste0("D:/m6A_Code/Data/MetDB_CellData/MotifSites/[DRACH_motif]"); k=2
# deepm6Adir=FileID=paste0("D:/m6A_Code/Data/MetDB_CellData/Deep_m6A_Sites/"); k=3
# peakdir=paste0("D:/m6A_Code/Data/HumanTissueSample/peak/"); k=1
# motifdir=paste0("D:/m6A_Code/Data/HumanTissueSample/MotifSites/[DRACH_motif]"); k=2
# motifdir=paste0("D:/m6A_Code/Data/MouseTissueSample/MotifSites/[DRACH_motif]"); k=2

peakinfodir=paste0("D:/m6A_Code/Data/HumanTissueSample/peak/")
# peakdir=paste0("D:/m6A_Code/Data/HumanTissueSample/peak/"); k=1
motifdir=paste0("D:/m6A_Code/Data/HumanTissueSample/MotifSites/[DRACH_motif]"); k=2

sample_list = SampleList[[sel]]
combined=data.frame()
for(i in 1:nrow(sample_list)){
  print(i)
  if(type[k]=="peak"){
    FileID = paste0(peakdir, sample_list[i,], "/exomePeak_output/[BED6]peak.bed")
    df1=read.table(FileID)
    colnames(df1) = c("seqnames", "start", "end", "name", "score", "strand")
  }else if(type[k]=="motif"){
    FileID = paste0(motifdir, sample_list[i,], ".rds")
    df1=readRDS(FileID)
    colnames(df1) = c("seqnames", "start", "end", "strand")
  }else if(type[k]=="deepm6A"){
    FileID = paste0(deepm6Adir, sample_list[i,], "_ip/CandidateSingleBasePeak.xls")
    df1=read.table(FileID); df1=df1[-c(1), ]
    colnames(df1) = c("seqnames", "start", "end", "name", "score", "strand", "motif")
  }
  
  df1 = df1[df1$seqnames=="chr1" |
              df1$seqnames=="chr2" |
              df1$seqnames=="chr3" |
              df1$seqnames=="chr4" |
              df1$seqnames=="chr5" |
              df1$seqnames=="chr6" |
              df1$seqnames=="chr7" |
              df1$seqnames=="chr8" |
              df1$seqnames=="chr9" |
              df1$seqnames=="chr10" |
              df1$seqnames=="chr11" |
              df1$seqnames=="chr12" |
              df1$seqnames=="chr13" |
              df1$seqnames=="chr14" |
              df1$seqnames=="chr15" |
              df1$seqnames=="chr16" |
              df1$seqnames=="chr17" |
              df1$seqnames=="chr18" |
              df1$seqnames=="chr19" |
              df1$seqnames=="chr20" |
              df1$seqnames=="chr21" |
              df1$seqnames=="chr22" |
              df1$seqnames=="chrX" |
              df1$seqnames=="chrY",  ]
  
  if( !is.null(df1$name) ){ df1 = df1[!is.na(df1$name), ] }
  
  df1$start = as.numeric(df1$start)
  df1$end = as.numeric(df1$end)
  
  if(type[k]=="motif"|type[k]=="deepm6A"){
    if( !identical(df1$start, df1$end) ){ df1$start = df1$start + 1 }
  }
  
  df1 = df1[order(df1$start, decreasing = F), ]
  df1 = df1[order(df1$seqnames, decreasing = F), ]
  rownames(df1) = NULL
  
  gr1 = GRanges(df1)
  
  if( !is.null(df1$score) ){gr1 = reduce_ranges_directed( gr1, score=max(score) )
  }else if( is.null(df1$score) ){gr1 = reduce_ranges_directed( gr1 )}
  
  
  FileID = paste0(peakinfodir, sample_list[i,], "/exomePeak_output/con_peak_info.rds")
  df2=readRDS(FileID)
  df2=df2[[1]]
  
  df2 = df2[df2$seqnames=="chr1" |
              df2$seqnames=="chr2" |
              df2$seqnames=="chr3" |
              df2$seqnames=="chr4" |
              df2$seqnames=="chr5" |
              df2$seqnames=="chr6" |
              df2$seqnames=="chr7" |
              df2$seqnames=="chr8" |
              df2$seqnames=="chr9" |
              df2$seqnames=="chr10" |
              df2$seqnames=="chr11" |
              df2$seqnames=="chr12" |
              df2$seqnames=="chr13" |
              df2$seqnames=="chr14" |
              df2$seqnames=="chr15" |
              df2$seqnames=="chr16" |
              df2$seqnames=="chr17" |
              df2$seqnames=="chr18" |
              df2$seqnames=="chr19" |
              df2$seqnames=="chr20" |
              df2$seqnames=="chr21" |
              df2$seqnames=="chr22" |
              df2$seqnames=="chrX" |
              df2$seqnames=="chrY",  ]
  
  if( !is.null(df2$gene_id) ){ df2 = df2[!is.na(df2$gene_id), ] }
  
  df2$start = as.numeric(df2$start)
  df2$end = as.numeric(df2$end)
  
  df2 = df2[order(df2$start, decreasing = F), ]
  df2 = df2[order(df2$seqnames, decreasing = F), ]
  rownames(df2) = NULL
  
  gr2 = GRanges(df2)
  if( !is.null(df2$score) ){gr2 = reduce_ranges_directed(gr2, 
                                                         IP1 = max(IP1), 
                                                         Input1=max(Input1) )
  }else if( is.null(df2$score) ){gr2 = reduce_ranges_directed( gr2 )}
  gr1 = find_overlaps_directed(gr1, gr2)
  
  df1 = as.data.frame(gr1)
  df1$strand = as.character(df1$strand)
  df1$strand[df1$strand=="+"] = "p"
  df1$strand[df1$strand=="-"] = "n"  
  df1$Tag = paste0(df1$seqnames, "_", df1$start, "_", df1$end, "_", df1$strand)
  df1$strand[df1$strand=="p"] = "+"
  df1$strand[df1$strand=="n"] = "-"
  
  if(!is.na(summary(duplicated(df1$Tag))[3])){
    print("Error - check duplicated elements")
    break
  }
  
  df1 = cbind(sample=sample_list[i,], df1)
  combined = rbind.data.frame(combined, df1)
}

combined=combined[order(combined$start, decreasing = F),]
combined=combined[order(combined$seqnames, decreasing = F),]
rownames(combined) = NULL


fid = paste0(getwd(),"/Data/", strsplit(names(SampleList[sel]),".txt"), "_", type[k], "_ExpCount.rds")
saveRDS(combined, fid ) 


############################################################################################


rm(list=ls())

ls=list.files(path = getwd(), pattern = "[[overlap]]", full.names = T)
ls


sel=7
allsites <- readRDS(ls[sel])

check <- function(x){if(!is.na(x)) {return(x)}else{return(0)}}
strsplit(ls[sel], "/")[[1]][3] %>% strsplit(., "_") %>% .[[1]] %>% .[2] %>% as.numeric(.) %>% 
  check(.) %>% assign("MaxNum", ., envir = .GlobalEnv) 
MaxNum = strsplit(ls[sel], "/")[[1]][3] %>% strsplit(., "_") %>% .[[1]] %>% .[4] %>% as.numeric(.) %>% 
  check(.) %>% sum(MaxNum, . )

allsites$Is_m6A_Atlas[allsites$Is_m6A_Atlas==1]=c("Yes")
allsites$Is_m6A_Atlas[allsites$Is_m6A_Atlas==0]=c("No")

class1 = allsites

ratio=(MaxNum/100); if(ratio<0.3){ratio=0.5}



tt= strsplit(ls[sel], "]")[[1]][2] %>% strsplit(., ".rds") %>% paste0( ., "_ExpCount1" )
W=16*ratio
H=9*ratio

data = class1[class1$sample == "293T-0-1", ]


ggplot(data, aes(x=overlap, y=Input1, col=sample)) + 
  geom_line(size=1) + geom_point()

ggplot(data, aes(x=overlap, y=Input1, col=sample)) + 
  geom_violin() 

ggplot(data, aes(x=overlap, y=Input1, col=sample)) + 
  geom_density() 



d1 = data[data$overlap >= MaxNum*0.9, ]
d2 = data[data$overlap <= MaxNum*0.1, ]

temp = rbind( cbind( level="Top10%", d1 ),
              cbind( level="Low10%", d2 )
              )

ggplot(temp, aes(Input1, fill = level)) +
  geom_density(alpha=0.5) + 
  xlim(0, mean(temp$Input1))



d1 = class1[class1$overlap >= MaxNum*0.9, ]

d1$sample = as.factor(d1$sample)
ggplot(d1, aes(Input1, fill = sample)) +
geom_density(alpha=0.5) + 
  xlim(0, mean(d1$Input1)) 

d2 = class1[class1$overlap <= MaxNum*0.1, ]
ggplot(d2, aes(Input1, fill = sample)) +
  geom_density(alpha=0.5) + 
  xlim(0, mean(d2$Input1)) 




d1 = class1[class1$overlap >= MaxNum*0.95, ]
d2 = class1[class1$overlap <= MaxNum*0.05, ]
temp = rbind( cbind( level="Top5%", d1 ),
              cbind( level="Low5%", d2 )
)
ggplot(temp, aes(Input1, fill = sample)) +
  geom_density(alpha=0.5) + 
  xlim(0, mean(temp$Input1)*3) + facet_grid( .~level) +
  theme(legend.position = "none")


d1 = class1[class1$overlap >= MaxNum*0.95, ]
d2 = class1[class1$overlap <= MaxNum*0.05, ]
temp = rbind( cbind( level="Top5%", d1 ),
              cbind( level="Low5%", d2 )
)
ggplot(temp, aes(Input1, fill = level)) +
  geom_density(alpha=0.5) + 
  xlim(0, mean(temp$Input1)*3) + facet_wrap(sample~.) +
  theme(legend.position = "none")



data=class1
data$overlap = as.factor(data$overlap)
ggplot(data, aes(Input1, fill = overlap)) +
  geom_density(alpha=0.5) +
  xlim(0, mean(data$Input1)*3) 


data = class1[class1$sample == "293T-0-1", ]
fligner.test(Input1 ~ overlap, data=data )

data = class1
fligner.test(Input1 ~ overlap, data=data )


d1 = class1[class1$overlap >= MaxNum*0.95, ]
d2 = class1[class1$overlap <= MaxNum*0.5, ]
temp = rbind( cbind( level="Top5%", d1 ),
              cbind( level="Low5%", d2 )
)
fligner.test(Input1 ~ level, data=temp )



High=0.95
Low=0.05
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
              )
fligner.test(Input1 ~ level, data=temp )
var.test(Input1 ~ level, data=temp )



High=0.5
Low=0.45
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
fligner.test(Input1 ~ level, data=temp )
var.test(Input1 ~ level, data=temp )



High=0.5
Low=0.45
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=overlap, y=Input1, fill=level)) +
  geom_bar(stat="identity", position="dodge")



High=0.95
Low=0.05
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(Input1, fill=level)) +
  geom_histogram(alpha=0.5, binwidth = 5) +
  facet_grid(level~.)



High=0.51
Low=0.49
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, col = level)) + 
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10")



High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, col = sample)) + facet_grid(level~.) +
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10") + 
  theme(legend.position = "none")


High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, col = level)) +
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10") 


High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, fill = sample)) +
  geom_density(size = 1, alpha=0.3) +   theme_bw() +
  scale_x_continuous(trans = "log10") + 
  facet_wrap(level~.) + theme(legend.position = "none") 

ggplot(temp, aes(x=IP1, fill = sample)) +
  geom_density(size = 1, alpha=0.3) +   theme_bw() +
  scale_x_continuous(trans = "log10") + 
  facet_wrap(level~.) + theme(legend.position = "none") 



High=0.95
Low=0.05
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, col = level)) +
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10") 



High=0.95
Low=0.05
data = class1[class1$sample == "293T-0-1", ]
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind.data.frame( cbind( level=paste0("Top", High*100, "%_Input"), count=d1$Input1 ),
              cbind( level=paste0("Top", High*100, "%_IP"), count=d1$IP1 ),
              cbind( level=paste0("Low", Low*100, "%_Input"), count=d2$Input1 ), 
              cbind( level=paste0("Low", Low*100, "%_IP"), count=d2$IP1 )
)
temp$count = as.numeric(temp$count)
ggplot(temp, aes(x=count, col = level)) +
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10") 



High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind.data.frame( cbind( level=paste0("Top", High*100, "%_Input"), count=d1$Input1 ),
                         cbind( level=paste0("Top", High*100, "%_IP"), count=d1$IP1 ),
                         cbind( level=paste0("Low", Low*100, "%_Input"), count=d2$Input1 ), 
                         cbind( level=paste0("Low", Low*100, "%_IP"), count=d2$IP1 )
)
temp$count = as.numeric(temp$count)
ggplot(temp, aes(x=count, col = level)) +
  geom_density(size = 1) + 
  scale_x_continuous(trans = "log10") 




data = class1[class1$sample == "293T-0-1", ]

data=class1
temp = data.frame()
for(i in 1:3){
  High=1-0.05*i
  Low=0.05*i
  d1 = data[data$overlap >= MaxNum*High, ]
  d2 = data[data$overlap <= MaxNum*Low, ]
  temp = rbind( temp,
                cbind( level=paste0("Top", High*100, "%"), d1 ),
                cbind( level=paste0("Low", Low*100, "%"), d2 )
                )
}
ggplot(temp, aes(x=Input1, col = level)) +
  geom_density(size = 1, alpha=0.4) + theme_bw() +facet_wrap(sample~.)+
  scale_x_continuous(trans = "log10") 


High=0.90
Low=0.1
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind.data.frame( cbind( level=paste0("Top", High*100, "%_Input"), count=d1$Input1 ),
                         cbind( level=paste0("Top", High*100, "%_IP"), count=d1$IP1 ),
                         cbind( level=paste0("Low", Low*100, "%_Input"), count=d2$Input1 ), 
                         cbind( level=paste0("Low", Low*100, "%_IP"), count=d2$IP1 )
)
temp$count = as.numeric(temp$count)
ggplot(temp, aes(x=count, col = level)) +
  geom_density(size = 1, alpha=0.4) + theme_bw() +
  scale_x_continuous(trans = "log10") 





High=0.90
Low=0.1
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp=data.frame()
temp = rbind( temp,
              cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
ggplot(temp, aes(x=Input1, col = sample)) +
  theme_bw() + geom_density(alpha=0.4) + facet_grid(level~.) +
  scale_x_continuous(trans = "log10") + 
  theme(legend.position = "none")








data = class1[class1$sample == "293T-0-1", ]
temp = data.frame()
for(i in 1:3){
  High=1-0.05*i
  Low=0.05*i
  d1 = data[data$overlap >= MaxNum*High, ]
  d2 = data[data$overlap <= MaxNum*Low, ]
  temp = rbind( temp,
                cbind( group="High", d1 ),
                cbind( group="Low", d2 )
  )
}
fligner.test(Input1 ~ group, data=temp )
var.test(Input1 ~ group, data=temp )




data = class1
temp = data.frame()
for(i in 1:3){
  High=1-0.05*i
  Low=0.05*i
  d1 = data[data$overlap >= MaxNum*High, ]
  d2 = data[data$overlap <= MaxNum*Low, ]
  temp = rbind( temp,
                cbind( group="High", Input1 = d1$Input1 ),
                cbind( group="Low", Input1 = d2$Input1 )
  )
}
temp$Input1 = as.numeric(temp$Input1)
fligner.test(Input1 ~ group, data=temp )
var.test(Input1 ~ group, data=temp )



High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( temp,
              cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
test=data.frame()
test= fligner.test(Input1 ~ sample, data=temp ) %>% unlist(.) %>% 
  as.data.frame(.) %>% rbind( test, . )
test= fligner.test(IP1 ~ sample, data=temp ) %>% unlist(.) %>% 
  as.data.frame(.) %>% rbind( test, . )

















High=0.95
Low=0.05
data = class1
data$sample = as.factor(data$sample)
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]

## Null: Gene expression level of low/high overlapped motif sites are equal across sample
aov <- lm(Input1~sample, data=d1)
anova(aov)

aov <- lm(Input1~sample, data=d2)
anova(aov)  


High=0.95
Low=0.05
data = class1
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]

d1$overlap = as.factor(d1$overlap)
d2$overlap = as.factor(d2$overlap)

## Null: Gene expression level of low/high overlapped motif sites are equal across overlap
aov <- lm(Input1~overlap, data=d1)
anova(aov)

aov <- lm(Input1~overlap, data=d2)
anova(aov)   















data = class1[class1$sample == "293T-0-1", ]
High=0.95
Low=0.05
d1 = data[data$overlap >= MaxNum*High, ]
d2 = data[data$overlap <= MaxNum*Low, ]
temp = rbind( temp,
              cbind( level=paste0("Top", High*100, "%"), d1 ),
              cbind( level=paste0("Low", Low*100, "%"), d2 )
)
aov <- lm(Input1~sample, data=d1)
anova(aov)

aov <- lm(Input1~overlap, data=d1)
anova(aov)

aov <- lm(Input1~sample, data=d2)
anova(aov)      

aov <- lm(Input1~overlap, data=d2)
anova(aov)   




saveRDS(p, file=paste0(getwd(),"/[Plot]",tt,".rds"))
ggsave(paste0(getwd(),"/[Plot]", tt, ".png"), plot=p, width=W, height = H)
ggsave(paste0(getwd(),"/[Plot]", tt, ".pdf"), plot=p, width=W, height = H)














data=InsectSprays
sample=tapply(InsectSprays$count, InsectSprays$spray, length)
mean=tapply(InsectSprays$count, InsectSprays$spray, mean)
SD=tapply(InsectSprays$count, InsectSprays$spray, sd)


plotmeans(count ~ spray, data=InsectSprays)

plotmeans(count ~ spray, 
          data=InsectSprays, 
          barcol = "tomato", 
          barwidth = 3, 
          col = "cornflowerblue", 
          lwd = 2, 
          xlab = "Type of Spray", 
          ylab = "Insect Count",
          main = "Performance of Insect Sprays")

boxplot(count ~ spray, data=InsectSprays,
        col = "tomato",
        xlab = "Type of Spray", 
        ylab = "Insect Count",
        main = "Performance of Insect Sprays")


qqPlot(InsectSprays$count, id=FALSE, pch=20, col="deepskyblue",
       xlab = "Theoretical Quantiles", ylab = "Empirical Quantiles",
       main = "Q-Q Plot")

## Null: count has normal distribution
shapiro.test(InsectSprays$count)


## Null: count across spray are equaliy distributed
sprays.aov = aov(count ~ spray, data = InsectSprays)
sprays.aov
summary(sprays.aov)
# ==> spray: deviation between groups
# ==> residual: deviation within group


# test across groups, A~F
sprays.compare <- TukeyHSD(sprays.aov)
sprays.compare

# if confidence range includes 0, then Null is correct
# otherwise, Null is not correct
plot(sprays.compare, col="blue", las=1)


tuk.hsd <- glht(model = sprays.aov, linfct = mcp(spray = "Tukey"))
cld(tuk.hsd, level = 0.05)
plot(cld(tuk.hsd, level = 0.05), col="orange", las=1)



## test homogeneity of variance across groups
## Null: variances across groups are homogeneous
leveneTest(count ~ spray, data = InsectSprays)
#===> p<0.05, therefore homogeneity is not valid

# homogeneity of variances
bartlett.test(count ~ spray, data = InsectSprays)



## data, which is not homogeneity in variance,
## do oneway.test
oneway.test(count ~ spray, data = InsectSprays)
#===> p < 0.05, therefore, there are differences of counts across sprays





### variance test for multi-variable

str(ToothGrowth)
ToothGrowth$dose <- factor(ToothGrowth$dose, levels = c(0.5, 1.0, 2.0),
                           labels = c("low", "med", "high"))
with(ToothGrowth, tapply(len, list(supp, dose), length))
with(ToothGrowth, tapply(len, list(supp, dose), mean))
with(ToothGrowth, tapply(len, list(supp, dose), sd))

ToothGrowth.aov <- aov(len ~ supp * dose , data = ToothGrowth)
summary(ToothGrowth.aov)
##===> supp and dose are affecting the length,
## and supp and dose are affecting each other
model.tables(ToothGrowth.aov, type="means")

boxplot(len ~ supp * dose , 
        data = ToothGrowth, 
        col = c("deeppink", "yellowgreen"), 
        las=1,
        xlab = "Vitamin C Type", ylab = "Tooth Growth",
        main="Effects of Vitamin C on Tooth Growth of Guinea Pig")

interaction.plot(x.factor = ToothGrowth$dose,
                 trace.factor=ToothGrowth$supp,
                 response = ToothGrowth$len,
                 trace.label = "Supplement",
                 las=1, type="b", pch=c(1, 19),
                 col=c("blue", "red"),
                 xlab="Dose Level", ylab = "Tooth Length",
                 main="Interaction Plot for Tooth Growth of Guinea Pigs")

plotmeans(len~interaction(supp, dose, sep= " "), data = ToothGrowth,
          connect = list(c(1,3,5), c(2,4,6)),
          col = c("red", "green3"),
          xlab="Supplement and Dose Combination",
          ylab= "Tooth Growth",
          main ="Means Plot fot Tooth Growth of Guinea Pigs",
)


coplot(len ~ dose | supp, data = ToothGrowth,
       col="steelblue", pch=19,
       panel=panel.smooth, lwd=2, col.smooth="darkorange",
       xlab="Doae Level", ylab="Tooth Growth")


interaction2wt(len ~ supp * dose, data = ToothGrowth)


TukeyHSD(ToothGrowth.aov)
# VC:high-OJ:high 1.0000000
# ===> there are no differences when both are high






library(car)
qqPlot(InsectSprays$count, id=FALSE, pch=20, col="deepskyblue",
         xlab = "Theoretical Quantiles", ylab = "Empirical Quantiles",
         main = "Q-Q Plot")














