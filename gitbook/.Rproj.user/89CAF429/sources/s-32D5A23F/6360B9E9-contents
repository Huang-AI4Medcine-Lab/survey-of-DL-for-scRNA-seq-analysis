--- 
title: "Deep learning tackles single-cell analysis - A survey of deep learning for scRNA-seq analysis"
author: "**Mario Flores<sup>1§</sup>, Zhentao Liu<sup>1</sup>, Tinghe Zhang<sup>1</sup>, Md Musaddaqui Hasib<sup>1</sup>, Yu-Chiao Chiu<sup>2</sup>, Zhenqing Ye<sup>2,3</sup>, Karla Paniagua<sup>1</sup>, Sumin Jo<sup>1</sup>, Jianqiu Zhang<sup>1</sup>, Shou-Jiang Gao<sup>4,6</sup>, Yufang Jin<sup>1</sup>, Yidong Chen<sup>2,3§</sup>, and Yufei Huang<sup>5,6§</sup>**"
date: "`r Sys.Date()`"
site: bookdown::bookdown_site
output: bookdown::gitbook
number_sections: yes
documentclass: book
# bibliography: [book.bib]
bibliography: [book.bib, packages.bib]
# bibliography: References.bib
biblio-style: apalike
# biblio-style: cell.cls
link-citations: yes
github-repo: Huang-AI4Medicine-Lab/survey-of-DL-for-scRNA-seq-analysis

---

# bibliography: [book.bib]

Placeholder


#### **<sup>§</sup> Corresponding authors** {-}
#### **Affiliations** {-}

<!--chapter:end:index.Rmd-->



# About this book {-}

This book is full version of our research paper **[Please add paper publish information here]**.

> **Keywords** 
> 
>  deep learning; single-cell RNA-seq; imputation; dimention reduction; clustering; batch correction; cell type identification; functional prediction; visualization


## Abstract {-} 
[Abstract]: Abstract
Since its selection as the method of the year in 2013, single-cell technologies have become mature enough to provide answers to complex research questions. However, together with the growth of single-cell profiling technologies, there has also been an increase of computational challenges to process the generated datasets. It's here that by effectively leveraging large data sets, Deep Learning (DL) is positioning as the first option for single-cell analyses. Here we provide a unified mathematical description of the DL methods used in single cell RNA sequencing (scRNA-Seq) followed with the survey of the most representative published DL algorithms for scRNA-Seq in the field.

## Key Points {-}
* Single cell RNA sequencing technology generate large collection of transcriptomic profiles of up to millions of cells, enabling biological investigation of hidden structures or cell types, predicting their effects or responses to treatment more precisely, or utilizing subpopulation to address unanswered hypotheses. 
* Current Deep Learning-based analysis approaches for single cell RNA seq data is systematically reviewed in this paper according to the challenge they address and their roles in the analysis pipeline.
* A unified mathematical description of the surveyed DL models is presented and the specific model features were discussed when reviewing each approach.  
* A comprehensive summary of the evaluation metrics, comparision algorithms, and datasets by each approaches is presented. 




<!--chapter:end:00-summary.Rmd-->



# Introduction {#ch-1}

Single cell sequencing technology has been a rapidly developing area to study genomics, transcriptomics, proteomics, metabolomics, and cellular interactions at the single cell level for cell-type identification, tissue composition and reprogramming [@RN87; @RN98]<!-- [1,2].  -->. Specifically, sequencing of the transcriptome of single cells, or single-cell RNA-sequencing (scRNA-seq), has become the dominant technology in many frontier research areas such as disease progression and drug discovery [@RN191; @RN78]<!-- [3, 4] -->. One particular area where scRNA-seq has made a tangible impact is cancer, where scRNA-seq is becoming a powerful tool for understanding invasion, intratumor heterogeneity, metastasis, epigenetic alterations, detecting rare cancer stem cells, and therapeutic response (refs). Currently, scRNA-seq is applied to develop personalized therapeutic strategies that are potentially useful in cancer diagnosis, therapy resistance during cancer progression, and the survival of patients [@RN85; @RN59]<!-- [5, 6] -->. The scRNA-seq has also been adopted to combat COVID-19 to elucidate how the innate and adaptive host immune system miscommunicates resulting in worsening the immunopathology produced during this viral infection [@RN91; @RN99]<!-- [7, 8] -->.

These studies have led to a massive amount of scRNA-seq data deposited to public databases such as 10X Single-cell gene expression dataset, Human Cell Atlas, and Mouse Cell Atlas. Expressions of millions of cells from 18 species have been collected and deposited, waiting for further analysis. On the other hand, due to biological and technical factors, scRNA-seq data presents several analytical challenges related to its complex characteristics like missing expression values, high technical and biological variance, noise and sparse gene coverage, and elusive cell identities [@RN87] <!--[1]-->. These characteristics make it difficult to directly apply commonly used bulk RNA-seq data analysis techniques and have called for novel statistical approaches for scRNA-seq data cleaning and computational algorithms for data analysis and interpretation. To this end, specialized scRNA-seq analysis pipelines such as Seurat [@RN96]<!--[9]--> and Scanpy [@RN100]<!--[10]-->. along with a large collection of task-specific tools, have been developed to address the intricate technical and biological complexity of scRNA-seq data. 

Recently, deep learning has demonstrated its significant advantages in natural language processing and speech and facial recognition with massive data [@RN95; @RN76; @RN88]<!--[11-13]-->. Such advantages have initiated the application of DL in scRNA-seq data analysis as a competitive alternative to conventional machine learning approaches for uncovering cell clustering [@RN76; @RN53] <!--[14, 15]-->, cell type identification [@RN76; @RN102]<!--[14, 16]-->, gene imputation [@RN46; @RN44; @RN93]<!--[17-19]-->,  and batch correction [@RN75]<!--[20]--> in scRNA-seq analysis. Compared to conventional machine learning (ML) approaches, DL is more powerful in capturing complex features of high-dimensional scRNA-seq data. It is also more versatile , where a single model can be trained to address multiple tasks or adapted and transferred to different tasks. Moreover, the DL training scales more favorably with the number of cells in scRNA-seq data size, making it particularly attractive for handling the ever-increasing volume of single cell data.  Indeed, the growing body of DL-based tools has demonstrated DL’s exciting potential as a learning paradigm to significantly advance the tools we use to interrogate scRNA-seq data.  

In this paper, we present a comprehensive review of the recent advances of DL methods for solving the present challenges in scRNA-seq data analysis (Table\@ref(tab:Table1)) from the quality control, normalization/batch effect reduction, dimension reduction, visualization, feature selection, and data interpretation by surveying deep learning papers published up to April 2021. In order to maintain high quality for this review, we choose not to include any (bio)archival papers, although a proportion of these manuscripts contain important new findings that would be published after completing their peer-reviewed process. Previous efforts to review the recent advances in machine learning methods focused on efficient integration of single cell data [@RN94; @RN90]<!--[21, 22]-->. A recent review of DL applications on single cell data has summarized 21 DL algorithms that might be deployed in single cell studies [@RN80]<!--[23]-->. It also evaluated the clustering and data correction effect of these DL algorithms using 11 datasets.

In this review, we focus more on the DL algorithms with a much detailed explanation and comparison. Further, to better understand the relationship of each surveyed DL model with the overall scRNA-seq analysis pipeline, we organize the surveys according to the challenge they address and discuss these DL models following the analysis pipeline. A unified mathematical description of the surveyed DL models is presented and the specific model features are discussed when reviewing each method. This will also shed light on the modeling connections among the surveyed DL methods and the recognization of the uniqueness of each model. Besides the models, we also summarize the evaluation matrics of these DL algorithms and compare the tools that integrate these DL algorithms. Access to these DL algorithms with the original research results, available datasets used by these methods are also listed to demonstrate the advantages and utility of the DL algorithms. We envision that this survey will serve as an important information portal for learning the application of DL for scRNA-seq analysis and inspire innovative use of DL to address a broader range of new challenges in emerging multi-omics and spatial single-cell sequencing. 







<!--chapter:end:01-introduction.Rmd-->


# Overview of scRNA-seq processing pipeline {#ch-2}

Placeholder



<!--chapter:end:02-overview-of-scRNA-seq-pipeline.Rmd-->


# Overview of common deep learning models for scRNA-seq analysis {#ch-3}


```{r Figure2, fig.cap = "Graphical models of the surveyed DL models including A) Variational Autoencoder (VAE); B) Autoencoder (AE); and C) Generative Adversarial Network (GAN)"}
knitr::include_graphics("Figures/Figure2.png")
```


Unsupervised learning is the key step in the scRNA-Seq analysis, including batch correction, dimension reduction, imputation, and clustering, which lend themselves naturally to unsupervised DL models including the variational autoencoder (VAE), the autoencoder (AE), or generative adversarial networks (GAN). Also, adversarial transfer learning has been applied for cell-type classification. We started our review by introducing the general formulations of VAE, AE, and GAN for scRNA-seq together with their training strategies. These general formulations facilitate understanding the methodologies used by different papers in developing their specific algorithms, enabling us to focus on the different features of each method and bring attention to their uniqueness and novelty.  


<!--chapter:end:03-overview-of-common-dl-models-for-scRNA-seq-analysis.Rmd-->



## Variational Autoencoder (VAEs) for scRNA-Seq data {#ch-3-1}

<!--chapter:end:03.1-vae-for-scRNA-seq-data.Rmd-->


## Autoencoders (AEs) for scRNA-seq data {#ch-3-2}


AEs have been proposed to learn the low dimensional latent representation of expression $x_{n}$. The AE includes an encoder $E_{\phi}$ and a decoder $D_{\theta}$ (Fig.\@ref(fig:Figure2)B) such that

\begin{equation}
	z_{n}=E_{\phi}(x_{n}); \hat{x_{n}} = D_{\theta}(z_{n})	(\#eq:eq7)
\end{equation}

where like VAE $z_{n} \in R^{d}$ is the d-dimension latent variable,  $\Theta = \{\theta,\phi\}$ are encoder and decoder weight parameters, and $\hat{x_{n}}$ defines the parameters (e.g. mean) of data distribution and thus the likelihood $p(x_{n} \vert \Theta)$ (Fig.\@ref(fig:Figure1)B). Note that the mean of $p(x_{n}\vert \Theta)$ is often considered as the imputed and denoised expression of $x_{n}$. For most common AEs, $p(x_{n}\vert \Theta)$ assumes a Gaussian distribution and $\hat{x_{n}}$ becomes the mean of the Gaussian and can be directly used as imputed, normalized gene expression. Nevertheless, additional designs can be introduced to attend imputation specifically.  $p(x_{n}\vert \Theta)$ can also be negative binomial (NB) or ZINB as in DCA [@RN80]<!--[23]--> to model the reads count directly with their parameters defined as functions of $\hat{x_{n}}$. Additional design can be included in the AE model for batch correction, clustering, and other functions. 

The training of the AE is generally carried out by stochastic gradient descent algorithms to minimize the loss with the general expression similar to that of VAE in eq.\@ref(eq:eq6) 

\begin{equation}
	L(\Theta)=L_{0}(\Theta)+\sum_{k=1}^{K}\lambda_{k}L_{k}(\Theta) (\#eq:eq8)
\end{equation}

where $L_{0}$ is $-\log{p(x_{n}\vert \Theta)}$, and $L_{k}s$ are $K$ additional function-specific losses. When $p(x_{n} \vert \Theta)$ is the Gaussian,  $L_{0}$ becomes one of the most commonly used mean square error (MSE) loss

\begin{equation}
L_{0}(\Theta)=\sum_{n=1}^{N}\|x_{n}-\hat{x_{n}}\|_{2}^{2} (\#eq:eq9)
\end{equation}


Because different AE models differ in their AE architectures and the loss functions, we will discuss the specific architecture and the loss functions for each reviewed model.  

<!--chapter:end:03.2-ae-for-scRNA-seq-data.Rmd-->


## Generative adversarial networks (GANs) for scRNA-seq data {#ch-3-3}

GANs have been used for imputation, data generation and augmentation of the scRNA-seq analysis. Without loss of generality, the GAN, when applied to scRNA-seq, is designed to learn to generate gene expression profiles from $p_{x}$, the distribution of $x_{n}$, the count or normalized expression vectors of the scRNA data. The vanilla GAN consists of two deep neural networks [@RN98]<!--[2]-->. The first network is the generator $G_{\theta}(z_{n},y_{n})$ with parameter $\theta$, which is essentially a decoder that takes a noise vector $z_{n}$ from the distribution $p_{z}$ and a class label $y$ (e.g. cell type) as input and is trained to generate $x_{f}$, a "fake" sample of a gene expression profile (Fig.\@ref(fig:Figure2)C). Note that including a class label $y_{n}$ at the input is optional and when it is included, the model is known as the conditional GAN. The second network is the discriminator network $D_{\phi_{D}}$ with parameters $\phi_{D}$, which is a classifier trained to distinguish between the "real" sample $x$ and fake data $x_{f}$ (Fig.\@ref(fig:Figure1)C). The generator $G_{\theta}$ and discriminator $D_{\phi_{D}}$ are trained to outplay each other, resulting in a minimax game, in which $G_{\theta}$ is forced by $D_{\phi_{D}}$ to produce better samples, which, when converge, can fool the discriminator $D_{\phi_{D}}$, thus becoming samples from $p_{x}$. The vanilla GAN suffers heavily from training instability and mode collapsing [@RN104]<!--[44]-->. To that end, Wasserstein GAN (WGAN) was developed to effectively improve the training stability and convergence [@RN107]<!--[45]-->. The WGAN loss computes the Wasserstein distance, also called the earth moving distance between the real and fake sample distributions [@RN181]<!--[46]-->:  

\begin{equation}
  L(\Theta)=\max_{\phi_{D}}\sum_{n=1}^{N}D_{\phi_{D}}(x_{n})-\sum{n=1}^{N}D_{\phi_{D}}(G_{\theta}(z_{n},y_{n})) (\#eq:eq10)
\end{equation}


Additional terms can also be added to (\@ref(eq:eq10)) to constrain the functions of the generator. Training based on the WGAN loss in Eq. (\@ref(eq:eq10) ) amounts to a min-max optimization, which iterates between the discriminator and generator, where each optimization is achieved by a stochastic gradient descent algorithm through backpropagation. The WGAN requires D to be K-Lipschitz continuous [@RN104]<!--[44]-->, which can be satisfied by adding the gradient penalty to the WGAN loss [@RN103]<!--[47]-->. Once the training is done, the generator $G_{\phi_{G}}$ can be used to generate gene expression profiles of new cells.

<!--chapter:end:03.3-gan-for-scRNA-seq-data.Rmd-->


# Overview of datasets and evaluation metrics {#ch-4}

A variety of datasets and performance evaluation metrics have been used to demonstrate the performance of the surveyed DL models for different tasks. We summarize these datasets and evaluation metrics in Table \@ref(tab:Table2a) & \@ref(tab:Table3). We detail the mathematical definition of the evaluation metrics in the following. 


<!--chapter:end:04-overview-of-datasets-and-evaluation-metrics.Rmd-->



## Evaluation methods {#ch-4-1}

An extensive list of evaluation methods has been proposed for different scRNA-seq analysis tasks [@RN44; @RN45; @RN43]<!--[18, 48, 49]-->. We provide an overview here the methods adopted in the surveyed papers. We discuss them according to the key categories on which the surveyed papers are organized, namely, imputation, batch effect correction, dimension reduction and clustering, cell type identification, and functional analysis.    

<!--chapter:end:04.1-evaluation-methods.Rmd-->



### Imputation {#ch-4-1-1}

<!--chapter:end:04.1.1-imputation.Rmd-->



### Batch effect correction {#ch-4-1-2}

<!--chapter:end:04.1.2-batch-effect-correction.Rmd-->



### Clustering {#ch-4-1-3}

<!--chapter:end:04.1.3-clustering.Rmd-->


# Survey of deep learning models for scRNA-Seq analysis  {#ch-5}


In this section, we survey applications of DL models for scRNA-seq analysis. To better understand the relationship between the problems that each surveyed work addresses and the key challenges in the general scRNA-seq processing pipeline,  we divide the survey into sections according to steps in the scRNA-seq processing pipeline illustrated in Fig.\@ref(fig:Figure1). For each DL model, we present the model details under the general model framework introduced in Section \@ref(ch-3) and discuss the specific loss functions. We also survey the evaluation metrics and summarize the evaluation results. To facilitate cross-references of the information, we summarized all algorithms reviewed in this section in Table \@ref(tab:Table1) and tabulate the datasets and evaluation metrics used in each paper in Tables \@ref(tab:Table2a) & \@ref(tab:Table3). We also listed all other algorithms that each surveyed method evaluated against in Fig.\@ref(fig:Figure3), highlighting the extensiveness these algorithms were assessed for their performance. 


```{r Figure3, fig.cap="Add figure caption here"}
knitr::include_graphics("Figures/Figure3.png")

```

<!--chapter:end:05-survey-of-dl-models-for-scRNA-seq-analysis.Rmd-->


## Imputation {#ch-5-1}

The goal of imputation is to estimate the missing gene expression values due to dropout, or the failure to amplify the original RNA transcripts.  These missing expression values can affect downstream bioinformatics analysis significantly as it decreases the power of the studies and introduces biases in gene expression [@RN46]<!--[17]-->. VAE, AE, and GAN have been applied for imputation and we review their specific model designs in this section.



<!--chapter:end:05.1-imputation.Rmd-->



### DCA:deep count autoencoder {#ch-5-1-1}

<!--chapter:end:05.1.1-dca.Rmd-->



### SAVER-X: single-cell analysis via expression recovery harnessing external data {#ch-5-1-2}

<!--chapter:end:05.1.2-saver-x.Rmd-->


### DeepImpute (Deep neural network Imputation) {#ch-5-1-3}

DeepImpute [@RN46]<!--[17]--> is a deep neural network model that imputes genes in a divide-and-conquer approach. DeepImpute implemented in Keras framework/TenorFlow environment.

*Model.* For each dataset, DeepImpute selects to impute a list of genes or highly variable genes (variance over mean ratio, default = 0.5). Each sub-neural network aims to understand the relationship between the input genes (input layer) and a subset of target genes (output layer). Genes are first divided into N random subsets of size 512 called target genes. For each subset, a neural network of four layers (input, dense, dropout and output layers) is trained where the input layer includes genes (predictor genes) who are among top 5 best correlated genes to target genes but not part of the target genes in the subset. The loss is defined as the weighted MSE 

\begin{equation}
\mathcal{L}_{c}=\sum x_{n}(x_{n}-\hat{x}_{n})^{2}(\#eq:eq15)
\end{equation}


This function gives higher weights to genes with higher expression values, thus emphasizing accuracy on high confidence values and avoiding over penalizing genes with extremely low values. 

*Evaluation metrics.* DeepImpute computes mean squared error (MSE) and Pearson's correlation coefficient between imputed and true expression. 

*Result.* DeepImpute had the highest overall accuracy and offered faster computation time with less demand on computer memory compared to other methods like MAGIC, DrImpute, ScImpute, SAVER, VIPER, and DCA. Using simulated and experimental datasets (Table \@ref(tab:Table2a)), DeepImpute showed benefits in increasing clustering results and identifying significantly differentially expressed genes. DeepImpute and DCA, show overall advantages over other methods and between which DeepImpute performs even better. The properties of DeepImpute contribute to its superior performance include 1) a divide-and-conquer approach which contrary to an autoencoder as implemented in DCA, resulting in a lower complexity in each sub-model and stabilizing neural networks, and 2) the subnetworks are trained without using the target genes as the input which reduces overfitting while enforcing the network to understand true relationships between genes.











<!--chapter:end:05.1.3-DeepImpute.Rmd-->


### LATE: Learning with AuToEncoder  {#ch-5-1-4}

LATE [@RN184]<!--[57]--> is an AE whose encoder takes the log-transformed expression as input. LATE implemented in Python with TensorFlow.

*Model. * LATE sets zeros for all missing values at the input and generates the imputed expressions at the decoder's output. LATE experimented with three different network architectures composed of 1, 3 and 5 hidden layers. LATE minimizes the MSE loss as defined in Eq. (\@ref(eq:eq9)). One problem with this model is that it assumes that all the zeros in the scRNA-seq data are missing values but some zeros could be real and reflect the actual lack of expression. 

*Evaluation metrics.* Like DeepImpute, LATE used MSE to evaluate the performance. 

*Result.* Using synthetic data generated from pre-imputed data followed with random dropout selection at different degree, LATE is shown to outperform other existing methods like MAGIC, SAVER, DCA, scVI, particularly when the ground truth contains only a few or no zeros. However, when the data contain many zero expression values, DCA achieved a lower MSE than LATE, although LATE still has a smaller MSE than scVI.  This result suggests that DCA likely does a better job identifying true zeros gene expression, partly due to that LATE does not make assumptions on the statistical distributions of the single-cell data that potentially have inflated zero counts.

<!--chapter:end:05.1.4-late.Rmd-->


### scGMAI  {#ch-5-1-5}

Technically, scGMAI [@RN109]<!--[58]--> is a model for clustering but it includes an AE in the first step to combat dropout. The scGAMI’s AE model is implemented with TensorFlow. 

*Model. * To impute the missing values, scGMAI applies an AE like LATE to reconstruct log-transformed expressions with dropout. One difference is that it chooses Softplus as the activation function since it is smoother than ReLU and thus more suitable for scRNA-seq data. The MSE loss as in (9) is adopted. 
After imputation, scGMAI uses fast independent component analysis (ICA) on the AE reconstructed expression to reduce the dimension and then applies a Gaussian mixture model on the ICA reduced data to perform the clustering. 

*Evaluation metrics.* It used clustering metrics including NMI, ARI, Homogeneity, and Completeness to evaluate the performance. 

*Results.* To assess the performance, the AE in scGMAI was replaced by five other imputation methods including SAVER [@RN30]<!--[32]-->, MAGIC [@RN111]<!--[55]-->, DCA [@RN80]<!--[23]-->, scImpute [@RN31]<!--[33]-->, and CIDR [@RN113]<!--[59]-->. A scGMAI implementation without AE was also compared. Seventeen scRNA-seq data (part of them are listed in Table \@ref(tab:Table2a) as marked) were used to evaluate cell clustering performances. The results indicated that the AEs significantly improved the clustering performance in eight of seventeen scRNA-Seq datasets.

<!--chapter:end:05.1.5-scGMAI.Rmd-->


### scIGANs  {#ch-5-1-6}

Imputation approaches based on information from cells with similar expressions suffer from oversmoothing, especially for rare cell types. scIGANs [@RN102]<!--[16]-->  is a GAN-based imputation algorithm, which overcomes this problem by using the observed samples with missing values to train a GAN to generate samples with imputed expressions. 

*Model.* The gene expression vector $x_{n}$ is first reshaped into a square image-like format and scIGAN takes the reshaped data as input. The model follows a BEGAN [@RN116]<!--[60]--> framework, which substitutes the generator with an autoencoder that includes an encoder E and a decoder G and also replaces the discriminator $D$ with a function $R_{\phi_{R}}$) that computes the reconstruction error of the autoencoder (e.g. MSE).  Then, the Wasserstein distance between the reconstruction errors of the real and generated samples are computed as the loss

\begin{equation}
L(\theta,\phi) = \max_{\phi_{R}}\sum_{n=1}^{N}R_{\phi_{R}}(x_{n})-\sum_{n=1}^{N}R_{\phi_{R}}(G_{\theta}(E_{\phi}(x_{n}),y) (\#eq:eq16)
\end{equation}

The encoder and decoder are trained in a GAN fashion to minimize this Wasserstein distance. This framework forces the model to meet two computing objectives, i.e. reconstructing the real samples and discriminating between real and generated samples.  Proportional Control Theory was applied to balance these two goals during the training.  
After training, the decoder $G_{\theta}$ is used to generate new samples of a specific cell type. Then, the k-nearest neighbors (KNN) approach is applied to the real and generated samples to impute the real samples' missing expressions.  

*Evaluation metrics.* It used a variety of clustering- and classification-based metrics including ARI, ACC, AUC and F-score. 

*Results.* scIGANs was first tested on simulated samples with different dropout rates. Performance of rescuing the correct clusters was compared with 11 existing imputation approaches including DCA, DeepImpute, SAVER, scImpute, MAGIC, etc. scIGANs reported the best performance for all metrics. scIGAN was next evaluated for correctly clustering cell types on the Human brain scRNA-seq data and showed superior performance than existing methods again. scIGANs was next evaluated for identifying cell-cycle states using scRNA-seq datasets from mouse embryonic stem cells. The results showed that scIGANs outperformed competing existing approaches for recovering subcellular states of cell cycle dynamics. scIGANs was further shown to improve the identification of differentially expressed genes and enhance the inference of cellular trajectory using time-course scRNA-seq data from the differentiation from H1 ESC to definitive endoderm cells (DEC). Finally, scIGAN was also shown to scale to scRNA-seq methods and data sizes.  


<!--chapter:end:05.1.6-scIGANs.Rmd-->


## Batch effect correction {#ch-5-2}

The goal of imputation is to estimate the missing gene expression values due to dropout, or the failure to amplify the original RNA transcripts.  These missing expression values can affect downstream bioinformatics analysis significantly as it decreases the power of the studies and introduces biases in gene expression [@RN46]<!--[17]-->. VAE, AE, and GAN have been applied for imputation and we review their specific model designs in this section.



<!--chapter:end:05.2-batch-effect-correction.Rmd-->


### BERMUDA: Batch Effect ReMoval Using Deep Autoencoders {#ch-5-2-1}

BERMUDA [@RN183]<!--[61]--> deploys a transfer-learning method to remove the batch effect. It performs correction to the shared cell clusters among batches and therefore preserves batch-specific cell populations.
Model.  BERMUDA has a conventional AE architecture that takes normalized, log-transformed expression of a cell as input. It has the general loss function but consists of two parts as 

\begin{equation}
L(\Theta) = L_{0}(\Theta) + \lambda L_{MMD}(\Theta) (\#eq:equ17)
\end{equation}


where $L_{0}(\Theta)$ is the MSE reconstruction loss as defined in Eq. (\@ref(eq:eq9)) and L_MMD is the maximum mean discrepancy (MMD) loss that measures the differences in distributions among similar cell clusters in different batches. MMD is a non-parametric distance between distributions based on the reproducing kernel Hilbert space (RKHS) [@RN185]<!--[51]-->. Instead of applying the MMD loss on batches entirely, BERMUDA considers the loss only between pairs of similar cell clusters shared among batches, where the MMD loss is defined as:

\begin{equation}
L_{MMD}(\Theta) = \sum_{i_{a},i_{b},j_{a},j_{b}}M_{i_{a},i_{b},j_{a},j_{b}}MMD(z_{i_{a},j_{a}},z_{i_{b}.j_{b}}) (\#eq:equ18)
\end{equation}

where $z_{i,j}$ is the latent variable of $x_{i,j}$, the input expression profile of a cell from cluster j of batch $i$, $M_{i_{a},j_{a},i_{b},j_{b}}$ is 1 if cluster $i_{a}$ of batch $j_{a}$  and cluster $i_{b}$ of batch $j_{b}$ are determined to be similar by MetaNeighbor [@RN186]<!--[62]--> and 0, otherwise. $MMD()$ equals zero when the underlying distributions of the observed samples are the same. By minimizing the MMD loss between the distributions of the latent variables of similar clusters, BERMUDA can be trained to remove batch effects in its latent variables.  

*Evaluation metrics.*  Evaluation of BERMUDA included three metrics: KBET, entropy of mixing, and silhouette index.  

*Results.* BERMUDA was shown to outperform other methods like mnnCorrect [@RN84]<!--[28]-->, BBKNN [@RN115]<!--[63]-->, Seurat [@RN96]<!--[9]-->, and scVI [@RN88]<!--[13]--> in removing batch effects on simulated and human pancreas data while preserving batch-specific biological signals.  BERMUDA provides several improvements compared to existing methods: 1) capable of removing batch effects even when the cell population compositions across different batches are vastly different; and 2) preserving batch-specific biological signals through transfer-learning which enables discovering new information that might be hard to extract by analyzing each batch individually.





<!--chapter:end:05.2.1-bermuda.Rmd-->



### DESC: batch correction based on clustering {#ch-5-2-2}

<!--chapter:end:05.2.2-desc.Rmd-->



### iMAP: Integration of Multiple single-cell datasets by Adversarial Paired-style transfer networks {#ch-5-2-3}

<!--chapter:end:05.2.3-imap.Rmd-->


## Dimension reduction, latent representation, clustering, and data augmentation {#ch-5-3}

Dimension reduction is indispensable for many type of scRNA-seq data analysis, considering the limited number of cell types in each biospecimen. Furthermore, biological processes of interests often involve the complex coordination of many genes, therefore, latent representation which capture biological variation in reduced dimentions are useful in interpreting many experiment conditions. In addition, many deep learning models further exploit latent dimentions and generative factors to produce augmented data that may in return to enhance the clustering, e.g., due to low representation of certain cell types. Therefore, we categories all these algorithms together in this section. 



<!--chapter:end:05.3-dimension-reduction.Rmd-->


### Dimension reduction by AEs with gene-interaction constrained architecture  {#ch-5-3-1}

This study [@RN193]<!--[68]-->  considers AEs for learning the low-dimensional representation and specifically explores the benefit of incorporating prior biological knowledge of gene-gene interactions to regularize the AE network architecture. 

*Model.* Several AE models with single or two hidden layers that incorporate gene interactions reflecting transcription factor (TF) regulations and protein-protein interactions (PPIs) are implemented. The models take normalized, log-transformed expressions and follow the general AE structure, including dimension-reducing and reconstructing layers, but the network architectures are not symmetrical. Specifically, gene interactions are incorporated such that each node of the first hidden layer represented a TF or a protein in the PPI; only genes that are targeted by TFs or involved in the PPI were connected to the node. Thus, the corresponding weights of $E_{\phi}$ and $D_{\theta}$ are set to be trainable and otherwise fixed at zero throughout the training process. Both unsupervised (AE-like) and supervised (cell-type label) learning were studied.  

*Evaluation metrics.* Performance of cells clustering was evaluated by six metrics including NMI, ARI, completeness, Fowlkes–Mallows score [@RN187]<!--[69]-->, homogeneity, and v-measure [@RN104]<!--[44]-->. Performance of cell-type retrieval was evaluated by the mean of average precision.

*Results.* Regularizing encoder connections with TF and PPI information considerably reduced the model complexity by almost 90% (7.5-7.6M to 1.0-1.1M). The clusters formed on the data representations learned from the models with or without TF and PPI information were compared to those from PCA, NMF, independent component analysis (ICA), t-SNE, and SIMLR [@RN38]<!--[40]-->. The model with TF/PPI information and 2 hidden layers achieved the best performance by five of the six measures (0.87-0.92) and the best average performance (0.90). In terms of the cell-type retrieval of single cells, the encoder models with and without TF/PPI information achieved the best performance in 4 and 3 cell types, respectively. PCA yielded the best performance in only 2 cell types. The DNN model with TF/PPI information and 2 hidden layers again achieved the best average performance (mean of average precision, 0.58) across all cell types. In summary, this study demonstrated a biologically meaningful way to regularize AEs by the prior biological knowledge for learning the representation of scRNA-Seq data for cell clustering and retrieval.



<!--chapter:end:05.3.1-dimension-reduction-by-aes.Rmd-->


### Dhaka: a VAE-based dimension reduction model {#ch-5-3-2}

Dhaka [@RN125]<!--[70]--> was proposed to reduce the dimension of scRNA-Seq data for efficient stratification of tumor subpopulations. 

*Model.*  Dhaka adopts a general VAE formulation. It takes the normalized, log-transformed expressions of a cell as input and outputs the low-dimensional representation.

*Evaluation matrics.* ARI was used to determine the quality of the resulting clustering for each dimensionality reduction method. Spearman rank correlation was assessed to the scoring metric (lineage or differentiation) to contrast with other programs.  

*Result.* Dhaka was first tested on the simulated dataset. The simulated dataset contains 500 cells, each including 3K genes, clustered into 5 different clusters with 100 cells each. The clustering performance was compared with other methods including t-SNE, PCA, SIMLR, NMF, an autoencoder, MAGIC, and scVI. Dhaka was shown to have an ARI higher than most other comparing methods. Dhaka was then applied to the Oligodendroglioma data and could separate malignant cells from non-malignant microglia/macrophage cells. It also uncovered the shared glial lineage and differentially expressed genes for the lineages. Dhaka was also applied to the Glioblastoma data and revealed an evolutionary trajectory of the malignant cells where cells were gradually progressing from a stemlike state to a more differentiated state. In contrast, other methods failed to capture this underlying structure. Dhaka was next applied to the Melanoma cancer dataset [@RN188]<!--[71]--> and uncovered two distinct clusters that showed the intra-tumor heterogeneity of the Melanoma samples. Dhaka was finally applied to copy number variation data [@RN189]<!--[72]--> and shown to identify one major and one minor cell clusters, of which other methods could not find.

<!--chapter:end:05.3.2-dhaka.Rmd-->



### cvis: a VAE for capturing low-dimensional structures  {#ch-5-3-3}

<!--chapter:end:05.3.3-scvis.Rmd-->


### scVAE: VAE for single-cell gene expression data  {#ch-5-3-4}

scVAE [@RN129]<!--[75]--> includes multiple VAE models for denoising gene expression levels and learning the low-dimensional latent representation of cells. It investigates different choices of the likelihood functions in the VAE model to model different data sets. 

*Model.* scVAE is a conventional fully connected network. However, different distributions have been discussed for $p(x_{gn}\vert v_{gn},\alpha_{gn})$ to model different data behaviors. Specifically, scVAE considers Poisson, constrained Poisson, and negative binomial distributions for count data, piece-wise categorical Poisson for data including both high and low counts, and zero-inflated version of these distributions to model missing values.  To model multiple modes in cell expressions, a Gaussian mixture is also considered for $q(z_{n}\vert x_{n},s_{n})$, resulting a GMVAE.  The inference process still follows that of a VAE as discussed in section 3.1.

*Evaluation metrics.* ARI was used to assess the performance.

*Results.* scVAEs were evaluated on the PBMC data and compared with factor analysis (FA) models. The results showed that GMVAE with negative binomial distribution achieved the highest lower bound and ARI. Zero-inflated Poisson distribution performed the second best. All scVAE models outperformed the baseline linear factor analysis model, which suggested that a non-linear model is needed to capture single-cell genomic features. GMVAE was also compared with Seurat and shown to perform better using the withheld data. However, scVAE performed no better than scVI [@RN88]<!--[13]--> or scvis [@RN127]<!--[73]-->, both are VAE models. 



<!--chapter:end:05.3.4-scVAE.Rmd-->


### VASC: VAE for scRNA-seq  {#ch-5-3-5}

VASC [@RN131]<!--[76]--> is another VAE for dimension reduction and latent representation but it models dropout. 

*Model:* VASC’s input is the log-transformed expression but rescaled in the range [0,1]. A dropout layer (dropout rate of 0.5) is added after the input layer to force subsequent layers to learn to avoid dropout noise. The encoder network has three layers fully connected and the first layer uses linear activation, which acts like an embedded PCA transformation. The next two layers use the ReLU activation, which ensures a sparse and stable output. This model's novelty is the zero-inflation layer (ZI layer), which is added after the decoder to model scRNA-seq dropout events. The probability of dropout event is defined as $e^{-\hat{x}^{2}}$ where x ̂ is the recovered expression value obtained by the decoder network. Since backpropagation cannot deal with stochastic network with categorical variables, a Gumbel-softmax distribution [@RN132]<!--[77]--> is introduced to address the difficulty of ZI layer. The loss function of the model takes the form $L = L_{0}(\Theta)+\lambda L_{c}(\Theta)$, where $L_{0}$ is the binary entropy because of the input is scaled to [0 1], and $L_{c}$ a loss performed using $KL$ divergence $KL(Q(z\vert x)\|P(z))$, where $z$ is the latent variables (Gaussian distribution). After the model is well trained, the latent code can be used as the dimension-reduced features for downstream tasks and visualization.

*Evaluation metrics.* Four measures are used to assess the performance including NMI, ARI, homogeneity, and completeness.

*Results.* VASC was compared with PCA, t-SNE, ZIFA, and SIMLR on 20 datasets. In the study of embryonic development from zygote to blast cells, all methods roughly re-established the development stages of different cell types in the dimension-reduced space. However, VASC showed better performance to model embryo developmental progression. In the Goolam, Biase and Yan datasets, scRNA-seq data were generated through embryonic development stages from zygote to blast, VASC re-established development stage from 1, 2, 4, 8, 16 to blast, while other methods failed. In the Pollen,  Kolodziejczyk ,and Baron dataset, VASC formed appropriate cluster, either with homogeneous cell type, preserved proper relative postions, or minimal batch influerence.  Interestingly, tested on the PBMC dataset, VASC showed to identify the major global structure (B cells, CD4+, CD8+ T cells, NK cells, Dendritic cells), it also detected subtle differences within monocytes (FCGR3A+ vs CD14+ monocytes), indicating the capability of VASC handling large number of cells or cell types.  Quantitative clustering performance in NMI, ARI, homogeneity and completeness was also performed. VASC always ranked top two in all the datasets. In terms of NMI and ARI, VASC best performed on 15 and 17 out of 20 datasets, respectively. 

<!--chapter:end:05.3.5-VASC.Rmd-->


### scDeepCluster  {#ch-5-3-6}

scDeepCluster [@RN133]<!--[78]--> is an AE network that simultaneously learns feature representation and performs clustering via explicit modeling of cell clusters as in DESC.

*Model:*  Similar to DCA, scDeepCluster adopts a ZINB distribution for $x_{n}$ as in Eq. (\@ref(eq:eq11)) and (\@ref(eq:eq12)). The loss function is

\begin{equation}
L(\Theta)=L_{0}(\Theta)+\gamma L_{c}(\Theta) (\#eq:eq30)
\end{equation}
                                                                                            
where $L_{0}$ is the negative log-likelihood of the ZINB data distribution as defined in Eq. (\@ref(eq:eq13)) and $L_{c}$ a clustering loss performed using $KL$ divergence as Eq. (\@ref(eq:eq20)) defined in DESC algorithm.  Comparing to csvis, in terms of clustering regularization, scvis uses t-SNE objective function which is faithful to feature representation by keeping local structure, while scDeepcluster uses KL divergence based clustering which focuses more on clustering assignment.

*Evaluation metrics.* The following three metrics are used to evaluate the performance, NMI, clustering accuracy, and ARI. 

*Results.* scDeepCluster was first tested on the simulation data and compared with other seven methods including DCA [@RN53]<!--[15]-->, two multi-kernel spectral clustering methods MPSSC [@RN135]<!--[79]--> and SIMLR [@RN38]<!--[40]-->, CIDR [@RN113]<!--[59]-->, PCA + k-mean, scvis [@RN127]<!--[73]--> and DEC [@RN253]<!--[80]-->. In different dropout rate simulations, scDeepCluster significantly outperformed the other methods consistently. In signal strength, imbalanced sample size, and scalability simulations, scDeepcluster outperformed all other algorithms and scDeepCluster and most notably advantages for weak signals, robust against different data imbalance levels and scaled linearly with the number of cells. scDeepCluster was then tested on four real datasets (10X PBMC, Mouse ES cells, Mouse bladder cells, Worm neuron cells) and shown to outperform all other comparing algorithms. Particularly, MPSSC and SIMLR failed to process the full datasets due to quadratic complexity.

<!--chapter:end:05.3.6-scDeepCluster.Rmd-->


### cscGAN: Conditional single-cell generative adversarial neural networks {#ch-5-3-7}

cscGAN [@RN139]<!--[82]--> is a GAN model designed to augment the existing scRNA-seq samples by generating expression profiles of specific cell types or subpopulations.

*Model.*  Two models, csGAN and cscGAN, were developed following the general formulation of WGAN described in section \@ref(ch-3-3)  The difference between the two models is that cscGAN is a conditional GAN such that the input to the generator also includes a class label y or cell type, i.e.  $\phi_{G}(z,y)$. The projection-based conditioning (PCGAN) method [@RN140]<!--[83]--> was adopted to obtain the conditional GAN. For both models, the generator (three layers of 1024, 512, and 256 neurons) and discriminator (three layers of 256, 512, and 1024 neurons) are fully connected DNNs.

*Evaluation metrics.* The performance of cscGAN was assessed qualitatively by comparing the t-SNE plots of the real and generated samples. In the first approach, cluster-specific marker genes were obtained and SCENIC [@RN252]<!--[84]--> was applied to learn the regulons for data including real and generated samples. Then, the ability of cscGAN to uncover the regulons from the real data was assessed. In the second approach, MMD between real and generated samples from cscGAN and other approaches were computed to measure their similarity. In the third approach, a classifier was trained to discriminate real from generated samples and the classification AUC was compared with that of a random guess. 

*Results:* The performance of scGAN was first evaluated using PBMC data. The generated samples were shown to capture the desired clusters and the real data's regulons. Additionally, the AUC performance for classifying real from generated samples by a Random Forest classifier only reached 0.65, performance close to 0.5. Finally, scGAN's generated samples had a smaller MMD than those of Splatter, a state-of-the-art scRNA-seq data simulator [@RN190]<!--[85]-->. Even though a large MMD was observed for scGAN when compared with that of SUGAR, another scRNA-seq simulator, SUGAR [@RN141]<!--[86]-->  was noted for prohibitively high runtime and memory. scGAN was further trained and assessed on the bigger mouse brain data and shown to model the expression dynamics across tissues.  Then, the performance of cscGAN for generating cell-type-specific samples was evaluated using the PBMC data. cscGAN was shown to generate high-quality scRAN-seq data for specific cell types.  Finally, the real PBMC samples were augmented with the generated samples. This augmentation improved the identification of rare cell types and the ability to capture transitional cell states from trajectory analysis. 

<!--chapter:end:05.3.7-scsGAN.Rmd-->


## Multi-functional models {#ch-5-4}

Given the versatility of AE and VAE in addressing different scRAN-seq analysis challenges, DL models possessing multiple analysis functions have been developed.  We survey these models in this section. 

<!--chapter:end:05.4-multi-functional.Rmd-->



### scVI: single-cell variational inference  {#ch-5-4-1}

<!--chapter:end:05.4.1-scVI.Rmd-->


### LDVAE: linearly decoded variational autoencoder {#ch-5-4-2}

LDVAE [@RN143]<!--[87]--> is an adaption of scVI to improve the model interpretability but it still benefits from the scalability and efficiency of scVI.  Also, this formulation applies to general VAE models and thus is not restricted to scRNA-seq analysis.

*Model.*  LDVAE follows scVI’s formulation but replaces the decoder $D_{\theta_{ν}}$ in (\@ref(eq:eq32)) by a linear model

\begin{equation}
	\mathbf{ν}_{n}=\mathbf{Wz}_{n}	(\#eq:eq35)
\end{equation}

where $\mathbf{W} \in \mathbb{R}^{d×G}$ is the wieight matrix. Being the linear decoder provides interpretability in the sense that the relationship between latent representation $z_{n}$ and gene expression $ν_{n}$ can be readily identified. LDVAE still follows the same loss and non-linear inference scheme as scVI. 

*Evaluation metrics.*  The reconstruction errors of the VAEs were used to assess the performance.  

*Results.* LDVAE’s latent variable $z_{n}$ could be used for clustering of cells with similar accuracy as a VAE.  Although LDVAE had a higher reconstruction error than VAE, due to the linear decoder, the variations along the different axes of $z_{n}$ establish direct linear relationships with input genes. As an example from analyzing mouse embryo scRNA-seq, $z_{1,n}$, the second element of $z_{n}$, is shown to relate to simultaneous variations in the expression of gene $Pou5f1$ and $Tdgf1$. In contrast, such interpretability would be intractable without approximation for a VAE.  LDVAE was also shown to induce fewer correlations between latent variables and improved the grouping of the regulatory programs. LDVAE also scaled to a large dataset with ~2M cells.  


<!--chapter:end:05.4.2-ldvae.Rmd-->



### SAUCIE {#ch-5-4-3}

<!--chapter:end:05.4.3-saucie.Rmd-->



### scScope {#ch-5-4-4}

<!--chapter:end:05.4.4-scScope.Rmd-->


## Doublet Classification  {#ch-5-5}

In scRNA-Seq, doublets are technical artifacts formed when two or more cells are encapsulated into one reaction volume by chance, therefore need to be removed before quantifying gene expression. 

<!--chapter:end:05.5-doubletClassification.Rmd-->


### Solo {#ch-5-5-1}

Solo [@RN154]<!--[93]--> is a semi-supervised deep learning approach that identifies doublets with greater accuracy than other existing methods.

*Model.* Solo identifies doublets by embedding cells using VAE first and then appends a feed-forward neural network layer to the encoder to form a supervised classifier on the labeled training samples. The method assumes that most cells in an experiment are singlets and one can approximate a view into the doublet population by generating simulated doublets in silico from the observed data. In Solo, doublets are assumed to have less than twice the UMI depth on average but an option to scale the merged counts by a specific factor is also provided. The method operates in three phases: (1) doublet simulation where a number $N_{d}$ of doublets are generated by taking the sum of randomly chosen observed cells considered putative singlets, and then model was trained to differentiate these in silico doublets from the observed data; (2) cell embedding where Solo embeds cells in a nonlinear latent space via a VAE that follows the scVI architecture; and (3) classifier training where a standard discriminative classifier is added to the end of the scVI encoder and trained using the simulated doublet samples and the observed cells to predict doublet status. Only the added classifier layer was trained with a binary cross-entropy loss, the scVI encoder was fixed during training.

*Evaluation metrics.* The performance was measured using precision-recall (PR) and receiver operator characteristic (ROC) curves and summarized with average precision (AP) and area under the receiver operator curve (AUROC). 

*Results.*  Solo performance was tested on a singlet/doublet population simulated using the Splatter toolkit [@RN190]<!--[85]--> and several experimental datasets, where Solo exceeds the performance of previous non-deep learning methods like Scrublet [@RN191]<!--[94]--> and DoubletFinder [@RN192]<!--[95]--> by greater margins in the larger and more complex datasets. Solo also outperformed existing computational methods for this task on a variety of cell line and tissue datasets with experimental doublet annotations. 


<!--chapter:end:05.5.1-solo.Rmd-->


##  Automated cell type identification {#ch-5-6}

scRNA-Seq is able to catalog cell types in complex tissues under different conditions. However, the commonly adopted manual cell typing approach based on known markers is time-consuming and less reproducible. We survey deep learning models that take the task of automated cell type identification. 


<!--chapter:end:05.6-automatedCellType.Rmd-->


### DigitalDLSorter {#ch-5-6-1}

DigitalDLSorter [@RN156]<!--[96]--> was proposed to identify and quantify the immune cells infiltrated in tumors captured in bulk RNA-seq, utilizing single-cell RNA-seq data. 

*Model.* DigitalDLSorter is a 4-layer DNN (2 hidden layers of 200 neurons each and an output of 10 cell types). The DigitalDLSorter is trained with two single-cell datasets: breast cancers [@RN220]<!--[97]--> and corectal cancers [@RN221]<!--[98]-->. For each cell, it is determined to be tumor cell or non-tumor cell using RNA-seq based CNV method [@RN220]<!--[97]-->, followed with using xCell algorithm [@RN249]<!--[99]--> to determine immune cell types for non-tumor cells. Different pseudo bulk (from 100 cells) RNA-seq datasets were prepared with known mixture proportion to train the DNN. The output of DigitalDLSorter is the predicted proportions of cell types in the input bulk sample.  

*Evaluation.*  Pearson Correlation between the predicted and real cell type proportions was used to assess the performance. 

*Result.* DigitalDLSorter was first tested on simulated bulk RNA-seq samples. DigitalDLSorter achieved excellent agreement (linear correlation of 0.99 for colorectual cancer, and good agreement in quadratic relationship for breast cancer) at predicting cell types proportion. The proportion of immune and nonimmune cell subtypes of test bulk TCGA samples was predicted by DigitalDLSorter and the results showed very good correlation to other deconvolution tools including TIMER [@RN220]<!--[97]-->, ESTIMATE [@RN248]<!--[100]-->, EPIC [@RN245]<!--[101]--> and MCPCounter [@RN247]<!--[102]-->. Using DigitalDLSorter predicted CD8+ (good prognosis for overall and disease-free survival) and Monocytes-Macrophages (MM, indicator for protumoral activity) proportions, it is found that patients with higher CD8+/MM ratio had better survival for both cancer types than those with lower CD8+/MM ratio. Both EPIC and MCPCounter yielded non-significant survival association using their cell proportion estimate.


<!--chapter:end:05.6.1-digitalDLSorter.Rmd-->


### scCapsNet  {#ch-5-6-2}

scCapsNet [@RN157]<!--[103]--> is an interpretable capsule network designed for cell type prediction. The paper showed that the trained network could be interpreted to inform marker genes and regulatory modules of cell types. 

*Model.*  Two-layer architecture of scCapsNet takes log-transformed, normalized expressions as input to form a feature extraction network (consists of L parallel sigle-layer neural networks) followed by a capsule network for cell-type classification (type capsules). For each of L parallel feature extraction layer, it generates a primary capsule $\boldsymbol{u}_{l} \in \mathbb{R}^{d_{p}}$ as

\begin{equation}
\boldsymbol{u}_{l} = ReLU(\boldsymbol{W}_{P,l} \boldsymbol{x}_{n}) \forall = 1 , … , L	(\#eq:eq43)
\end{equation}

where $\boldsymbol{W}_{P,l} \in \mathbb{R}^{d_{p}×G}$ is the weight matrix. Then, the primary capsules are fed into the capsule network to compute $K$ type capsules $v_{k} \in \mathbb{R}^{d_{t}}$, one for each cell type, as

\begin{equation}
v_{k}=squash(\sum_{l}^{L}c_{kl}\boldsymbol{W}_{kl}\boldsymbol{u}_{l}) \forall k=1,…,K	(\#eq:eq44)
\end{equation}

where squash is the squashing function [@RN159]<!--[104]--> to normalize the magnitude of its input vector to be less than one, $\boldsymbol{W}_{kl}$ is another trainable weight matrix, and $c_{kl} \forall l=1,…,L$ are the coupling coefficients that represent the probability distribution of each primary capsule’s impact on the prediction of cell type $k$.  $c_{kl}$ is not trained but computed through the dynamic routing process proposed in the original capsule networks [@RN157]<!--[103]-->. The magnitude of each type of capsule $v_{k}$ represents the probability of a single cell $x_{n}$ belonging to cell type $k$, which will be used for cell type classification. 	

The training of the network minimizes the cross-entropy loss by the back-propagation algorithm. Once trained, the interpretation of marker genes and regulatory modules can be achieved by determining first the important primary capsules for each cell type and then the most significant genes for each important primary capsule (identified based on  $c_{kl}$ directly). To determine the genes that are important for an important primary capsule  $l$, genes are ranked base on the scores of the first principal component computed from the columns of $\boldsymbol{W}_{P,l}$ and then the markers are obtained by a greedy search along with the ranked list for the best classification performance. 

*Evaluation matrics:* Accuracy of the predicted cell types was evaluated.   

*Results.* scCapsNet’s performance was evaluated on human PBMCs [@RN161]<!--[105]--> and mouse retinal bipolar cells [@RN163]<!--[106]--> datasets and shown to have comparable accuracies (99% and 97% respectively) with DNN and other popular ML algorithms (SVM, random forest, LDA and nearest neighbor). However, the interpretability of scCapsNet was demonstrated extensively. First, examining the coupling coefficients for each cell type showed that only a few primary capsules have high values and thus is effective. Subsequently, a set of core genes were identified for each effective capsules using the greedy search on the PC-score ranked gene list. GO enrichment analysis showed that these core genes were enriched in cell type related biological functions.  Mapping the expression data into space spanned by PCs of the columns of $\boldsymbol{W}_{P,l}$ corresponding to all core genes uncovered regulatory modules that would be missed by the T-SNE of gene expressions, which demonstrated the effectiveness of the embeddings learned by scCapsNet in capturing the functionally important features.   


<!--chapter:end:05.6.2-scCapsNet.Rmd-->


### netAE: network-enhanced autoencoder  {#ch-5-6-3}

netAE [@RN165]<!--[107]--> is a VAE-based semi-supervised cell type prediction model that deals with scenarios of having a small number of labeled cells. 

*Model.* netAE works with UMI counts and assumes a ZINB distribution for $x_{gn}$ as in Eq. (\@ref(eq:eq32)) in scVI. However, netAE adopts the general VAE loss as in eq. (6) with two function-specific loss as 

\begin{equation}
L(\Theta)=-\mathcal{L}(\Theta)+\lambda_{1} \sum_{n\in S}Q(\mathbf{z}_{n}) +\lambda_{2}\sum_{n \in S_{L}} \log{ f(y_{n}│\mathbf{z}_{n})} (\#eq:eq45)
\end{equation}

where $S$ is a set of indices for all cells and $S_{L}$ is a subset of $S$ for only cells with cell type labels, $Q$ is modified Newman and Girvan modularity [@RN166]<!--[108]--> that quantifies cluster strength using $z_{n}$, f is the softmax function, and $y_{n}$ is the cell type label. The second loss in (\@ref(eq:eq34)) functions as a clustering constraint and the last term is the cross-entropy loss that constrains the cell type classification. 

*Evaluation metrics.* Accuracy of cell type classification was used to assess the performance. 

*Results:* netAE was compared with popular dimension reduction methods including scVI, ZIFA, PCA and AE as well as a semi-supervised method scANVI [@RN169]<!--[109]-->. For different dimension reduction methods, cell type classification from latent features of cells was carried out using KNN and logistic regression.  The effect of different labeled samples sizes on classification performance was also investigated, where the sample size varied from as few as 10 cells to 70% of all cells. Among 3 test datasets (mouse brain cortex, human embryo development, and mouse hematopoietic stem and progenitor cells), netAE outperformed most of the baseline methods.  Latent features were visualized using t-SNE and cell clusters by netAE were tighter than those by other embedding spaces. There was also consistency of better cell-type classification with improved cell type clustering by netAE. This suggested that the latent spaces learned with added modularity constraint in the loss helped identify clusters of similar cells.  Ablation study by removing each of the three loss terms in Eq (45) showed a drop of cell-type classification accuracy, suggesting all three were necessary for the optimal performance.  











<!--chapter:end:05.6.3-netAE.Rmd-->


### scDGN - supervised adversarial alignment of single-cell RNA-seq data {#ch-5-6-4}

scDGN [@RN172]<!--[110]-->, or Single Cell Domain Generalization Network, is an domain adversarial network that aims to accurately assign cell types of single cells while performing batch removal (domain adaptation) at the same time. It benefits from the superior ability of domain adversarial learning to learn representations that are invariant to technical confounders. 

*Model.* scDGN takes the log-transformed, normalized expression as the input and has three main modules: i) an encoder ($E_{\phi}(x_{n})$) for dimension reduction of scRNA-Seq data, ii) cell-type classifier, $C_{\phi_{C}}(E_{\phi}(x_{n}))$ with parameters $\phi_{C}$, and iii) domain (batch) discriminator, $D_{ϕ_{D}} (E_{\phi}(x_{n}))$. The model has a Siamese design and the training takes a pair of cells $(x_{1},x_{2})$, each from the same or different batches. The encoder network contains two hidden layers with 1146 and 100 neurons. $C_{\phi_{C}}$ classifies the cell type and $D_{\phi_{D}}$ predicts whether $x_{1}$ and $x_{2}$ are from the same batch or not. The overall loss is denoted by

\begin{equation}
	L(\phi,\phi_{C},\phi_{D}) = L_{C}(C_{\phi_{C}}(E_{\phi}(x_{1}))) - \lambda L_{D}(D_{\phi_{D}}(E_{\phi}(x_{1})), D_{\phi_{D}}(E_{\phi}(x_{2})))	(\#eq:eq46)
\end{equation}

where $L_{C}$ is the cross entropy loss,  $L_{D}$ is a contrastive loss as described in [@RN244]<!--[111]-->. Notice that (\@ref(eq:eq46)) has an adversarial formulation and minimizing this loss maximizes the misclassification of cells from different batches, thus making them indistinguishable.  Similar to GAN training, scDGN is trained to iteratively solve: $\widehat{\phi}_{D} = argmin_{\phi_{D}}L(\widehat{\phi},\widehat{\phi}_{C},\phi_{D})$ and $(\widehat{\phi},\widehat{\phi}_{C} ) = argmin_{\phi,\phi_{C}}L(\phi,\phi_{C}, \widehat{\phi}_{D})$.


*Evaluation metrics.* Prediciton accuracy was used to evaluate the performance. 

*Results.* scDGN was tested for classifying cell types and aligning batches ranging in size from 10 to 39 cell types and from 4 to 155 batches. The performance was compared to a series of deep learning and traditional machine learning methods, including Lin et al. DNN [@RN193]<!--[68]-->, CaSTLe [@RN194]<!--[112]-->, MNN [@RN84]<!--[28]-->, scVI [@RN88][13], and Seurat [@RN96]<!--[9]-->. scDGN outperformed all other methods in the classification accuracy on a subset of scQuery datasets (0.29), PBMC (0.87), and 4 of the six Seurat pancreatic datasets (0.86-0.95). PCA visualization of the learned data representations demonstrated that scDGN overcame the batch differences and clearly separated cell clusters based on cell types, while other methods were vulnerable to batch effects. In summary, scDGN is a supervised adversarial alignment method to eliminate the batch effect of scRNA-Seq data and create cleaner representations of cell types.








<!--chapter:end:05.6.4-scDGN.Rmd-->


## Biological function prediction {#ch-5-7}

Predicting biological function and/reponse to treatment at single cell level or cell types is critical to understand cell system functioning and potent response to stimulation. Utilize DL models that captures gene-gene relationship and their property at latent space, several models we reviewed below provide some exciting approach to achieve complex biological functions and outcomes.

<!--chapter:end:05.7-biologicalFunctionPrediction.Rmd-->


### CNNC: convolutional neural network for coexpression {#ch-5-7-1}

CNNC [@RN174]<!--[113]--> is proposed to infer causal interactions between genes from scRNA-seq data. 

*Model.* CNNC is a Convolutional Neural Network (CNN), the most popular DL model. CNNC takes expression levels of two genes from many cells and transforms them into a 32 x 32 image-like normalized empirical probability function (NEPDF), which measures the probabilities of observing different coexpression levels between the two genes. CNNC includes 6 convolutional layers, 3 maxpooling layers, 1 flatten layer, and one output layer. All convolution layers have 32 kernels of  size 3x3.  Depending on the application, the output layer can be designed to predict the state of interaction (Yes/No) between the genes or the causal interaction between the input genes (no interaction, gene A regulates gene B, or gene B regulates gene A). 

*Evaluation matrics.* Prediction AUROC, AUPRC, and accuracy were assessed. 

*Result.* CNNC was trained to predict transcription factor (TF)-Gene interactions using the mESC data from scQuery [@RN195]<!--[114]-->, where the ground truth interactions were obtained from the ChIP-seq dataset from the GTRD database [@RN196]<!--[115]-->. The performance was compared with DNN, count statistics [@RN197]<!--[116]-->, and mutual information-based approach [@RN178]<!--[117]-->.  CNNC was shown to have more than 20% higher AUPRC than other methods and reported almost no false-negative for the top 5% predictions. CNNC was also trained to predict the pathway regulator-target gene pairs. The positive regulator-gene pairs were obtained from KEGG [@RN198]<!--[118]-->, Reactome [@RN176]<!--[119]-->, and negative samples were genes pairs that appeared in pathways but not interacted. CNNC was shown to have better performance of predicting regulator-gene pairs on both KEGG and Reactome pathways than other methods including Pearson correlation, count statistics, GENIE3 [@RN199]<!--[120]-->, Mutual information, Bayesian directed network (BDN), and DREMI [@RN178]<!--[117]-->.  CNNC was also applied for causality prediction between two genes, that is if two genes regulate each other and if they do, which gene is the regulator. The ground truth causal relationships were also obtained from the KEGG and Reactome datasets. Again, CNNC reported better performance than BDN, the common method developed to learn casual relationshop from gene expression data. CNNC was finally trained to assign 3 essential cell functions (cell cycle, circadian rhythm, and immune system) to genes. This is achieved by training CNNC to predict pair of genes from same function (e.g. Cell Cycle defined by mSigDB from gene set enrichment analysis (GSEA [@RN200]<!--[121]-->) as 1 and all other pairs as 0. The performance was compared with “guilt by association” and DNN, and CNNC were shown to have more than 4% higher AUROC and reported all positives for the top 10% predictions. 

<!--chapter:end:05.7.1-CNNC.Rmd-->


### scGen, a generative model to predict perturbation response of single cells across cell types {#ch-5-7-2}

scGen [@RN179]<!--[122]--> is designed to learn cell response to certain perturbation (drug treatment, gene knockout, etc) from single cell expression data and predict the response to the same perturbation for a new sample or a new cell type. The novelty of scGen is that it learns the response in the latent space instead of the expression data space.

*Model.* ScGen follows the general VAE for scRNA-seq data but uses the “latent space arithmetics” to learn perturbations' response. Given scRNAseq samples of perturbed (denoted as $p$) and unperturbed cells (denoted as $unp$), a VAE model is trained.  Then, the latent space representation $z_{p}$ and $z_{unpare}$ obtained for the perturbed and unperturbed cells. Following the notion that VAE could map nonlinear operations (e.g., perturbation) in the data space to linear operations in the latent space, ScGen estimate the response in the latent space as  $\delta=\bar{z}_{p}-\bar{z}_{unp}$, where $\bar{z}$ is the average representation of samples from the same cell type or different cell types. Then,  given the latent representation $z'_{unp}$ of an unperturbed cell for a new sample from the same or different cell type, the latent representation of the corresponding perturbed cell can be predicted as $z'_{p}=z'_{unp}+\delta$. The expression of the perturbed cell can also be estimated by feeding $z'_{p}$ into the VAE decoder. The scGen can also be expanded to samples and treatment across two species (using orthologues between species). When scGen is trained for species 1, or $s1$, with both perturbed and unperturbed cells but species 2, $s2$, with only unperturbed cells, then the latent code for the perturbed cells from $s2$ can be predicted as $z_{s_{2},p} = \frac{1}{2}(z_{s_{1},p} + z_{s_{2},unp} + \delta_{s} + \delta_{p})$ where $\delta_{p} = z_{s_{1},unp} - z_{s_{1},p}$ captures the response of perturbation and $\delta_{s} = z_{s_{1}}-z_{s_{2}}$ represents the difference between species. 

*Evaluation matrics.*  Correlation and UMAP visualization were used to assess the performance. 

*Result.* scGen was applied to predict perturbation of out-of-samples response in human PBMCs data, and scGen showed a higher average correlation ($R^{2}$= 0.948) between predicted and real data for six cell types. Comparing with other methods including CVAE [@RN201]<!--[123]-->, style transfer GAN [*124:reference not found*]<!--[124]-->, linear approaches based on vector arithmetics (VA) [@RN179]<!--[122]--> and PCA+VA, scGen predicted full distribution of ISG15 gene (strongest regulated gene by IFN-$\beta$) response to IFN-$\beta$ [@RN218]<!--[125]-->, while others might predicted mean (CAVE and style transfer GAN) but failed to produce the full distribution. scGen was also tested on predicting the intestinal epithelial cells’ response to infection [@RN226]<!--[126]-->. For early transit-amplifying cells, scGen showed good prediction ($R^{2}$=0.98) for both H. poly and Salmonella infection.  Finally, scGen was evaluated for perturbation across species using scRNA-seq data set by Hagai et al [@RN202]<!--[127]-->, which comprised of bone marrow-derived mononuclear phagocytes from mice, rats, rabbits, and pigs perturbed with lipopolysaccharide (LPS). scGen’s predictions of LPS perturbion responses were shown to be highly correlated ($R^{2}$ = 0.91) with the real responses.





<!--chapter:end:05.7.2-scGen.Rmd-->


# Conclusion and Discussions  {#ch-6}

Single cell RNA-Seq technologies are tools that help exploring the cell-type composition of a particular sample and how it is dysregulated during development and disease. 



<!--chapter:end:06-conclusionAndDiscussions.Rmd-->


# Tables  {#ch7}
[Tables]: Tables

## Deep Learning algorithms reviewed in the paper
```{r Table1}

table1=readRDS("./Table/Table1.rds")

kable(table1, caption = "Deep Learning algorithms reviewed in the paper", align = "lcccccc") %>%
  kable_styling("striped", full_width = TRUE) %>%
  group_rows(index =c("Imputation"=6, 
                      "Batch correction"=3, 
                      "Clustering, latent representation, dimension reduction, and data augmentation"=6,
                      "Multi-functional models (IM: imputation, BC: batch correction, CL: clustering)"=4,
                      "Cell type Identification"=4,
                      "Function analysis"=2
                      ),
             label_row_css = "background-color: #666; color: #fff;"
             ) %>%
  column_spec(1, width="20em") %>%
   footnote(general = "DL Model keywords: AE: autoencoder, AE+TL: autoencoder with transfer learning, AE: variational autoencoder, GAN: Generative adversarial network, CNN: convolutional neural network, DNN: deep neural network, DANN: domain adversarial neural network, CapsNet: capsule neural network",
            general_title = ""
           # number = c("Footnote 1; ", "Footnote 2; "),
           # alphabet = c("Footnote A; ", "Footnote B; "),
           # symbol = c("Footnote Symbol 1; ", "Footnote Symbol 2")
           ) %>%
scroll_box(width = "100%")

```


## Simulated single-cell data/algorithms
```{r Table2a}

table2=readRDS("./Table/Table2.rds")

kable(table2, caption = "Simulated single-cell data/algorithms") %>%
  kable_styling("striped", full_width = TRUE) %>%
scroll_box(width = "100%")

```


## Human single-cell data sources used by different DL algorithms
```{r Table2b}

table2b=readRDS("./Table/Table2b.rds")

kable(table2b, caption = "Human single-cell data sources used by different DL algorithms") %>%
  kable_styling("striped", full_width = TRUE) %>%
scroll_box(width = "100%")

```


## Mouse single-cell data sources used by different DL algorithms
```{r Table2c}

table2c=readRDS("./Table/Table2c.rds")

kable(table2c, caption = "Mouse single-cell data sources used by different DL algorithms") %>%
  kable_styling("striped", full_width = TRUE) %>%
scroll_box(width = "100%")

```

## Single-cell data derived from other species
```{r Table2d}

table2d=readRDS("./Table/Table2d.rds")

kable(table2d, caption = "Single-cell data derived from other species") %>%
  kable_styling("striped", full_width = TRUE) %>%
   footnote(number = "Processed data is available at https://github.com/ttgump/scDeepCluster/tree/master/scRNA-seq%20data",
           number_title = "") %>%
scroll_box(width = "100%")

```



## Large single-cell data source used by various algorithms
Table: (\#tab:Table2e) Large single-cell data source used by various algorithms

|Title|Sources|Notes| 
|-----|-------|-----|
|10X Single-cell gene expression dataset|  https://support.10xgenomics.com/single-cell-gene-expression/datasets | Contains large collection of scRNA-seq dataset generated using 10X system|
|Tabula Muris|https://tabula-muris.ds.czbiohub.org/ |Compendium of scRNA-seq data from mouse|
|HCA|https://data.humancellatlas.org/|Human single-cell atlas|
|MCA|https://figshare.com/s/865e694ad06d5857db4b, or GSE108097|Mouse single-cell atlas|
|scQuery|https://scquery.cs.cmu.edu/ |A web server cell type matching and key gene visualization. It is also a source for scRNA-seq collection (processed with common pipeline)|
|SeuratData|https://github.com/satijalab/seurat-data|List of datasets, including PBMC and human pancreatic islet cells| 
|cytoBank|https://cytobank.org/|Community of big data cytometry|


## Evaluation metrics used in surveyed DL algorithms

Table: (\#tab:Table3) Evaluation metrics used in surveyed DL algorithms

|Evaluation Method|Equations|Explanation|
|-----------------|---------|-----------|
|Pseudobulk RNA-seq| |Average of normalized (log2-transformed) scRNA-seq counts across cells is calculated and then correlation coefficient between the pseudobulk and the actual bulk RNA-seq profile of the same cell type is evaluated.|
|Mean squared error (MSE)|$MSE=\frac{1}{n}\sum_{i=1}^{n}(x_{i}-\hat{x}_{i})^{2}$|MSE assesses the quality of a predictor, or an estimator, from a collection of observed data $x$, with $\hat{x}$ being the predicted values.|
|Pearson correlation|$\rho_{X,Y}=\frac{cov(X,Y)}{\sigma_{X} \sigma_{Y}}$	where $cov()$ is the covariance, $\sigma_{X}$ and $\sigma_{Y}$ are the standard deviation of $X$ and $Y$, respectively.|
|Spearman correlation|$\rho_{s}=\rho_{r_{X},r_{Y}}=\frac{cov(r_{X},r_{Y})}{\sigma_{r_{X}}\sigma_{r_{Y}}}$| The Spearman correlation coefficient is defined as the Pearson correlation coefficient between the rank variables, where $r_{X}$ is the rank of $X$.|
|Entropy of accuracy, Hacc [20]|$H_{acc}=-\frac{1}{M}\sum_{i=1}^{M}\sum_{j=1}^{N_{i}}p_{i}\log{(p_{i}(x_{j}))}$|Measures the diversity of the ground-truth labels within each predicted cluster group. $p_{i}(x_{j})$ (or $q_{i}(x_{j})$) are the proportions of cells in the jth ground-truth cluster (or predicted cluster) relative to the total number of cells in the ith predicted cluster (or ground-truth clusters), respectively. |
|Entropy of purity, Hpur [20]| | Measures the diversity of the predicted cluster labels within each ground-truth group. |

<!-- |Entropy of mixing [31]|$E=∑_(i $ |This metric evaluates the mixing of cells from different batches in the neighborhood of each cell. C is the number of batches, and p_i is the proportion of cells from batch i among N nearest cells.| -->
<!-- |Mutual Information (MI) [157]|$MI(U,V)=∑_(i=1)^|U|▒∑_(j=1)^|V|▒〖P_UV (i,j)  log⁡((P_UV (i,j))/(P_U (i) P_V (j) $| where P_U (i)=|U_i |/N   and P_V (j)=|V_j |/N. Also, define the joint distribution probability is P_UV (i,j)=|U_i 〖∩V〗_j |/N. The MI is a measure of mutual dependency between two cluster assignments U and V.| -->
<!-- |Normalized Mutual Information (NMI) [158]|$NMI(U,V)=(2×MI(U,V))/[H(U)+H(V)]$|where H(U)=∑▒〖P_U (i)  log⁡(P_U (i)) 〗,H(V)=∑▒〖P_V (i)  log⁡(P_V (i)) 〗. The NMI is a normalization of the MI score between 0 and 1.| -->
<!-- |Kullback–Leibler (KL) divergence [159]|$D_KL (P||Q)=∑_(x∈χ)▒〖P(x)log⁡(P(x)/Q(x) )〗$|where discrete probability distributions P and Q  are defined on the same probability space .  This relative entropy is the measure for directed divergence between two distributions.|  -->
<!-- |Jaccard Index|$	J(U,V) $ | 0 ≤ J(U,V) ≤ 1. J = 1 if clusters U and V are the same. If U are V are empty, J is defined as 1.|  -->
<!-- |Fowlkes-Mallows Index for two clustering algorithms (FM)|$FM= √(TP/(TP+FP)×TP/(TP+FN))	$|TP as the number of pairs of points that are present in the same cluster in both U and V; FP as the number of pairs of points that are present in the same cluster in U but not in V; FN as the number of pairs of points that are present in the same cluster in V but not in U; and TN as the number of pairs of points that are in different clusters in both U and V.| -->
<!-- |Rand index (RI)|$	RI=(a+b)/(█(n@2))	$|Measure of constancy between two clustering outcomes, where a (or b) is the count of number of pairs of cells in one cluster (or different clusters) from one clustering algorithm but also fall in the same cluster (or different clusters) from the other clustering algorithm.|  -->
<!-- |Adjusted Rand index (ARI) [160]|$ARI=  (RI-E[RI])/(max⁡(RI)-E[RI]$  | ARI is a corrected-for-chance version of RI, where E[RI] is the expected Rand Index.| -->
<!-- |Silhouette index |$	s(i)=(b(i)-a(i))/(max⁡(a(i),b(i)))$|where a(i) is the average dissimilarity of ith cell to all other cells in the same cluster, and b(i) is the average dissimilarity of ith cell to all cells in the closest cluster. The range of s(i) is [−1,1], with 1 to be well-clustered and -1 to be completely misclassified.|  -->
<!-- |Maximum Mean Discrepancy (MMD) [58] |$ MMD(F,p,q)=   (sup)┬(f∈F)⁡〖‖μ_p-μ_q ‖_f 〗$|MMD is a non-parametric distance between distributions based on the reproducing kernel Hilbert space, or, a distance-based measure between two distribution p and q based on the mean embeddings p and q in a reproducing kernel Hilbert space F.| -->
<!-- |k-Nearest neighbor batch-effect test (kBET) [161]|$a_n^k=∑_(l=1)^L▒〖〖(N〗_nl^k-k∙f_l)〗^2/(k∙f_l )  ~X_(L-1)^2	$|Given a dataset of N cells from L batches with N_l denoting the number of cells in batch l, N_nl^k is the number of cells from batch l in the k-nearest neighbors of cell n, fl is the global fraction of cells in batch l, or f_l=N_l/N,  and  X_(L-1)^2 denotes the X^2 distribution with L-1 degrees of freedom. It uses a X^2-based test for random neighborhoods of fixed size to determine the significance (“well mixed”).| -->
<!-- |Local Inverse Simpson’s Index (LISI) [33]|$1/λ(n) =1/(Σ_(l=1)^L (p(l))^2 )	$| This is the inverse Simpson’s Index in the k-nearest neighbors of cell n for all batches, where p(l) denotes the proportion of batch l in the k-nearest neighbors. The score reports the effective number of batches in the k-nearest neighbors of cell n.| -->
<!-- |Homogeneity	| $HS=1-(H(P(U│V)))/H(P(U)) $|	where H() is the entropy, and U is the ground-truth assignment and V is the predicted assignment. The HS range from 0 to 1, where 1 indicates perfectly homogeneous labelling.| -->
<!-- |Completeness| $	CS=1-H(P(V│U))/H(P(V)) 	$|Its values range from 0 to 1, where 1 indicates all member from a ground-truth label are assigned to a single cluster.| -->
<!-- |V-Measure [162]| $V_β=((1+β)HS×CS)/(βHC+CS)	$| where  indicates the weight of HS. V-Measure is symmetric, i.e. switching the true and predicted cluster labels does not change V-Measure.| -->
<!-- |Precision, recall|$Precision=  TP/(TP+FP),recall=  TP/(TP+FN)	$| TP: true positive, FP: false positive, FN, false negative. | -->
<!-- |Accuracy	| $Accuracy=  (TP+TN)/N	$| N: all samples tested, TN: true negative| -->
<!-- |F1-score|$	F_1=  (2 Precision∙Recall)/(Precision+Recall)	$| A harmonic mean of precision and recall. It can be extended to F_β where β is a weight between precision and recall (similar to V-measure). | -->
<!-- |AUC, RUROC	| ![](Figures/Table3_AUC_Figure.png)|Area Under Curve (grey area).  Receiver operating characteristic (ROC) curve (red line). The similar measure can be performed on Precision-Recall curve (PRC), or AUPRC. Precision-Recall curves summarize the trade-off between the true positive rate and the positive predictive value for a predictive model (mostly for imbalanced dataset).| -->


## References


<!--chapter:end:07-Tables.Rmd-->

